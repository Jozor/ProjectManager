function CreateNewProject()
{
   $CurrentProject = new ScriptObject();
   $CurrentProject.targetBuildName = $CurrentEngineBuild.buildName;
   
   if($platform $= "windows")
      $CurrentProject.enableD3D = true;
      
   $CurrentProject.enableOpenGL = true;
   
   MainMenuGui.goToPage("NewProjectPage");
}

function populateProjectProperties(%isNew)
{
   if(%isNew $= "")
      %isNew = false;
      
   if(%isNew)
      updateBreadcrumbList("ProjectsPage;NewProjectPage");
   else
      updateBreadcrumbList("ProjectsPage;ProjectPropertiesPage");
   
   MainMenuGui.setActionBarVisible(!%isNew);
   
   MainMenuSearchBar.hidden = true;
   MainMenuSearchClearBtn.hidden = true;
   
   MainViewStack.hidden = false;
   MainViewStack.clear();
   
   /*%engineBuild = getEngineBuild($CurrentProject.engineBuildId);
   %tags = getEngineBuildTags($CurrentProject.engineBuildId);
   MainViewStack.add(createCard("Project Name", $CurrentProject.projectName, %tags, "The name of this project", false, 
         "", "Button", "", "Change", "changeProjectName($CurrentProject);"));
         
   /*if($CurrentEngineBuild.gitPath !$= "")
   {
      %gitPath = $CurrentEngineBuild.gitPath !$= "" ? $CurrentEngineBuild.gitPath : "(None)";
      MainViewStack.add(createCard("Git Repository URL", %gitPath, "", "The URL for the git repo this build is from", false, 
            "", %enabled ? "Button" : "", "", "Change", "changeEngineBuildGitPath($CurrentEngineBuild);"));
            
      %branchName = $CurrentEngineBuild.branchName;
      if(%branchName $= "")
         %branchName = "(Default}";
         
      MainViewStack.add(createCard("Git Repository Branch", %branchName, "", "The name of the branch in the git repo this build is from", false, 
            "", %enabled ? "Button" : "", "", "Change", "changeEngineBuildBranchName($CurrentEngineBuild);"));
   }*/
         
   /*%localPath = $CurrentProject.localPath !$= "" ? $CurrentProject.localPath : "(Unknown)";
   %buttonText = $CurrentProject.localPath !$= "" ? "Change" : "Find";
   MainViewStack.add(createCard("Local File Path", %localPath, "", "The local file path for this project on the current machine", false, 
         "", "Button", "", %buttonText, "changeProjectLocalPath($CurrentProject);"));
         
   //MainViewStack.add(createCard("Is Binary Build", "", "", "Does this engine build have precompiled binaries", false, 
   //      "", "Checkbox", "False;True", $CurrentEngineBuild.isBinary, "changeEngineBuildIsBinary($CurrentEngineBuild);"));
   
   //CMake Settings
   if(!%engineBuild.isBinary)
   {
      %cmakeRoll = new GuiRolloutCtrl() { 
         caption = "CMake Settings";
         extent = MainViewStack.extent.x SPC 40;
         profile = GuiMenuRolloutProfile;
         margin = "5 5 5 5";
         
         new GuiStackControl() {
            internalName = "stack";
            padding = "5";
         };
      };
      
      if($platform $= "Windows")
         %cmakeRoll-->stack.add(createEditCard("Enable D3D Renderer", "checkbox", "$CurrentProject.enableD3D", "Enable the D3D11 Renderer"));
         
      %cmakeRoll-->stack.add(createEditCard("Enable OpenGL Renderer", "checkbox", "$CurrentProject.enableOpenGL", "Enable the OpenGL Renderer"));
      
      %cmakeRoll-->stack.add(createEditCard("Enable PhysX Physics Plugin", "checkbox", "$CurrentProject.enablePhysX", "Makes the engine utilize the PhysX Physics Plugin"));
      %cmakeRoll-->stack.add(createEditCard("Enable Bullet Physics Plugin", "checkbox", "$CurrentProject.enableBullet", "Makes the engine utilize the Bullet Physics Plugin"));
      %cmakeRoll-->stack.add(createEditCard("Enable SQLite Support", "checkbox", "$CurrentProject.enableSQLite", "Adds SQLite database support"));
   }
   
   //Modules
   %moduleRoll = new GuiRolloutCtrl() { 
      caption = "Modules";
      extent = MainViewStack.extent.x SPC 40;
      profile = GuiMenuRolloutProfile;
      margin = "5 5 5 5";
      
      new GuiStackControl() {
         internalName = "stack";
         padding = "5";
      };
   };
   
   MainViewStack.add(%moduleRoll);*/
         
   %projectNameCard = createEditCard("Project Name", "TextEdit", "$CurrentProject.projectName", "The name of this project", "");
   MainViewStack.add(%projectNameCard);
   
   //MainViewStack.add(createEditCard("Project Preview Image", "FilePath", "$CurrentProject.previewImage", "The preview image displayed in the project manager for this project. (Optional)", ""));
   
   MainViewStack.add(createEditCard("Project Path", "Folder", "$CurrentProject.localPath", "The folder the project will be put into", ""));
   
   if($CurrentProject.targetBuildName $= "" && $CurrentProject.engineBuildId)
   {
      %targetBuild = getEngineBuild($CurrentProject.engineBuildId);
      $CurrentProject.targetBuildName = %targetBuild.buildName;
   }
   
   %buildList = getUsableEngineBuildsList();
   %engineBuildCard = createEditCard("Engine Build", "Dropdown", "$CurrentProject.targetBuildName", "What Engine build is this project using", %buildList);
   MainViewStack.add(%engineBuildCard);
   
   %targetBuildIdx = findEngineBuildByName($CurrentProject.targetBuildName);
   
   if(%targetBuildIdx != 0)
   {
      %targetBuild = getEngineBuild(%targetBuildIdx);
      
      if(!%targetBuild.isBinary)
      {
         %compilerList = getCompilerList();
         %generatorCard = createEditCard("Cmake Generator", "Dropdown", "$CurrentProject.generatorName", "What generator for CMake to run to generate source project files", %compilerList);
         MainViewStack.add(%generatorCard);
         
         %cmakeRoll = new GuiRolloutCtrl() { 
            caption = "CMake Settings";
            extent = MainViewStack.extent.x SPC 40;
            profile = GuiMenuRolloutProfile;
            margin = "5 5 5 5";
            
            new GuiStackControl() {
               internalName = "stack";
               padding = "5";
            };
         };
         
         MainViewStack.add(%cmakeRoll);
         
         if($platform $= "Windows")
            %cmakeRoll-->stack.add(createEditCard("Enable D3D Renderer", "checkbox", "$CurrentProject.enableD3D", "Enable the D3D11 Renderer", "No;Yes"));
            
         %cmakeRoll-->stack.add(createEditCard("Enable OpenGL Renderer", "checkbox", "$CurrentProject.enableOpenGL", "Enable the OpenGL Renderer", "No;Yes"));
         
         %cmakeRoll-->stack.add(createEditCard("Enable PhysX Physics Plugin", "checkbox", "$CurrentProject.enablePhysX", "Makes the engine utilize the PhysX Physics Plugin", "No;Yes"));
         %cmakeRoll-->stack.add(createEditCard("Enable Bullet Physics Plugin", "checkbox", "$CurrentProject.enableBullet", "Makes the engine utilize the Bullet Physics Plugin", "No;Yes"));
         %cmakeRoll-->stack.add(createEditCard("Enable SQLite Support", "checkbox", "$CurrentProject.enableSQLite", "Adds SQLite database support", "No;Yes"));
      }
      
      %moduleRoll = new GuiRolloutCtrl() { 
         caption = "Modules";
         extent = MainViewStack.extent.x SPC 40;
         profile = GuiMenuRolloutProfile;
         margin = "5 5 5 5";
         
         new GuiStackControl() {
            internalName = "stack";
            padding = "5";
         };
      };
      
      MainViewStack.add(%moduleRoll);
      
      %gamePath = getProjectGamePath($CurrentProject);
      
      for( %file = findFirstFile( %gamePath @ "data/*.module" );
           %file !$= "";
           %file = findNextFile( %gamePath @ "data/*.module" ))
      {
         %moduleName = fileBase(%file);
         
         %moduleCard = createCard(%moduleName, "", "", "", false, "", "button", "", "Remove", "dostuff();");
         %moduleRoll-->stack.add(%moduleCard);
      }
   }
   
   if(!%isNew)
   {
      %projectNameCard.callonChildren("setActive", false);
      %engineBuildCard.callonChildren("setActive", false);
      if(!%targetBuild.isBinary)
      {
         %generatorCard.callonChildren("setActive", false);
         //%cmakeRoll.callonChildren("setActive", false);
      }
   }
         
   if(%isNew)
   {
      %buttons = createOKCancelCard("Create", "Cancel", "saveNewProject();", "MainMenuGUI.goToPage(\"ProjectsPage\");");
   }
   else
      %buttons = createOKCancelCard("Save", "Cancel", "saveCurrentProject();", "MainMenuGUI.goToPage(\"ProjectsPage\");");
   
   %valid = true;
   
   if(%valid)
      %buttons-->okButton.setActive(true);
   else
      %buttons-->okButton.setActive(false);
      
   MainViewStack.add(%buttons);
   
   //
   //Now add our action panel buttons
   ActionButtonPanelList.clear();
   
   if($CurrentProject.localPath !$= "")
   {
      if(isFile(getProjectExecutablePath()))
         AddActionButton("ManagerUI:right_image", "Play", "runProject();", "");
         
      AddActionButton("ManagerUI:plus_image", "Add Module", "", "");
         
      //AddActionButton("ManagerUI:textField_image", "Open GUI Editor", "", "");
      //AddActionButton("ManagerUI:toolPencil_image", "Open Editor", "", "");
      
      if(isObject(%targetBuild) && !%targetBuild.isBinary)
      {
         AddActionButton("ManagerUI:return_image", "Regen Project", "regenerateProject();", "");
         
         if($platform $= "windows")
            AddActionButton("ManagerUI:open_image", "Open Solution", "openSolutionFile();", "");
         else
            AddActionButton("ManagerUI:open_image", "Open Build Dir", "openFileLocation($CurrentProject.buildPath);", "");
      }
   }
   
   AddActionButton("ManagerUI:trashcan_image", "Delete Project", "", "");
   AddActionButton("ManagerUI:trashcan_image", "Remove From List", "", "");
}

function saveCurrentProject()
{
   if(!isObject($CurrentProject))
      return;
      
   saveProject($CurrentProject);
}

function saveNewProject()
{
   if(!isObject($CurrentProject))
      return;
   
   incrementProjectCount();
   
   %newProjectId = getProjectCount();
   
   $CurrentProject.projectId = %newProjectId;
   
   generateNewProject();
}

function generateNewProject()
{
   %engineBuildId = findEngineBuildByName($CurrentProject.targetBuildName);
   $CurrentProject.engineBuildId = %engineBuildId;
   %engineBuild = getEngineBuild(%engineBuildId);
   %engineBuildPath = %engineBuild.localPath;
   %newProjectPath = $CurrentProject.localPath;
   
   %fullProjectPath = %newProjectPath @ "/";
   
   //sanitize the paths to be sure
   %engineBuildPath = strReplace(%engineBuildPath, "//", "/");
   %fullProjectPath = strReplace(%fullProjectPath, "//", "/");
   
   if(!IsDirectory(%fullProjectPath))
   {
      createPath(%fullProjectPath);
   }

   displayLoadingSplashGui();
   if(!%engineBuild.isBinary)
   {
      %buildPath = %fullProjectPath @ "Build/"; 
      if(!IsDirectory(%buildPath))
      {
         createPath(%buildPath);
      } 
      
      $CurrentProject.buildPath = %buildPath;
      
      if(!copyProjectFolder(%engineBuildPath, %fullProjectPath))
      {
         MessageBoxOK("Failed.", "Failed to copy the Engine Build to the new project path. Please try again.");  
         return;
      }
      
      //Install Template files
      %templatePath = %fullProjectPath @ "Templates/BaseGame/";
      %projectGamePath = %fullProjectPath @ "My Projects/" @ $CurrentProject.projectName @ "/";
      if(!copyProjectFolder(%templatePath, %projectGamePath))
      {
         MessageBoxOK("Error.", "Failed to copy the Template game files. Please run the INSTALL project in your IDE.");  
      }
   
      //Install modules
      /*%moduleCount = getModuleCount();
      for(%m=0; %m < %moduleCount; %m++)
      {
         %doInstall = getVariable("$TorqueManager::installModule[" @ %m @ "]");
         if(%doInstall)
         {
            %moduleName = getModuleNameByIndex(%m);
            %localPath = getModuleLocalPathByIndex(%m);
            %moduleInstallPath = %fullProjectPath @ "/My Projects/" @ %projName @ "/game/data/" @ %moduleName @ "/";
            if(!IsDirectory(%moduleInstallPath))
            {
               createPath(%moduleInstallPath);  
            }
            
            if(!copyProjectFolder(%localPath, %moduleInstallPath))
            {
               error("Failed to install module " @ %moduleName @ " from path: " @ %localPath @ " to new project: " @ %projName);
            }
         }
      }*/
      
      //run cmake
      %commandString = "cmake ";

      %commandString = %commandString @ "-S \"" @ %fullProjectPath @ "\" ";
      %commandString = %commandString @ "-B \"" @ %buildPath @ "\" ";
      %commandString = %commandString @ "-G \"" @ $CurrentProject.generatorName @ "\" ";
      %commandString = %commandString @ "-DTORQUE_APP_NAME:STRING=" @ $CurrentProject.projectName @ " -DCMAKE_GENERATOR_PLATFORM=x64";
      %commandString = %commandString @ " -DTORQUE_D3D11:BOOL=" @ $CurrentProject.enableD3D;
      %commandString = %commandString @ " -DTORQUE_OPENGL:BOOL=" @ $CurrentProject.enableOpenGL;
      %commandString = %commandString @ " -DTORQUE_PHYSICS_PHYSX3:BOOL=" @ $CurrentProject.enablePhysX;
      %commandString = %commandString @ " -DTORQUE_PHYSICS_BULLET:BOOL=" @ $CurrentProject.enableBullet;
      %commandString = %commandString @ " -DTORQUE_SQLITE:BOOL=" @ $CurrentProject.enableSqlite;

      systemCommand(%commandString, "makeProjectComplete");  
   }
   else
   {
      if(!copyProjectFolder(%engineBuildPath, %fullProjectPath))
      {
         MessageBoxOK("Failed.", "Failed to copy the Engine Build to the new project path. Please try again.");  
         return;
      }
      
      //Do the rename on the exe, torsion, etc files to comply them to the new project name  
      %appPath = findFirstFile( %fullProjectPath @ "/*.exe", false);
      if(%appPath !$= "")
      {
         %binaryName = fileBase(%appPath);
         
         %newAppPath = strReplace(%appPath, %binaryName, $CurrentProject.projectName);
         pathCopy(%appPath, %newAppPath);
         fileDelete(%appPath);
      }
      
      %appPath = findFirstFile( %fullProjectPath @ "/*.torsion", false);
      if(%appPath !$= "")
      {
         %binaryName = fileBase(%appPath);
         
         %newAppPath = strReplace(%appPath, %binaryName, $CurrentProject.projectName);
         pathCopy(%appPath, %newAppPath);
         fileDelete(%appPath);
      }
      
      //Install modules
      /*%moduleCount = getModuleCount();
      for(%m=0; %m < %moduleCount; %m++)
      {
         %doInstall = getVariable("$TorqueManager::installModule[" @ %m @ "]");
         if(%doInstall)
         {
            %moduleName = getModuleNameByIndex(%m);
            %localPath = getModuleLocalPathByIndex(%m);
            %moduleInstallPath = %fullProjectPath @ "/data/" @ %moduleName @ "/";
            if(!IsDirectory(%moduleInstallPath))
            {
               createPath(%moduleInstallPath);  
            }
            
            if(!copyProjectFolder(%localPath, %moduleInstallPath))
            {
               error("Failed to install module " @ %moduleName @ " from path: " @ %localPath @ " to new project: " @ %projName);
            }
         }
      }*/
      
      makeProjectComplete();
   }   
}

function makeProjectComplete(%resultCode)
{
   saveProject($CurrentProject);
   
   openSolutionFile();
   
   hideLoadingSplashGui();
   
   //Hop over to the projects page so we can check out our new project
   MainMenuGui.goToPage("ProjectsPage");
}

function getUsableEngineBuildsList()
{
   %buildCount = getEngineBuildCount();
   
   %buildList = "";
   for(%i=1; %i <= %buildCount; %i++)
   {
      %bld = getEngineBuild(%i);
      
      %buildName = %bld.buildName;
      
      if(%bld.localPath $= "")
         continue;
         
      if(!%bld.isBinary && $TorqueManager::cmakeNotFound)
         continue;

      if(%buildList $= "")
         %buildList = %buildName;
      else
         %buildList = %buildList @ ";" @ %buildName; 
   }
   
   if(%buildList $= "")
      %buildList = "No Valid Engine Builds";
      
   return %buildList;
}

function getCompilerList()
{
   %compilerList = "";
   if($platform $= "windows")
   {
      %compilerList = "Visual Studio 17 2022;Visual Studio 16 2019"; 
   }  
   else if($platform $= "macOS")
   {
      %compilerList = "XCode";
   } 

   if(%compilerList $= "")
      %compilerList = "Unix Makefile";
   else 
      %compilerList = %compilerList @ ";Unix Makefile";
   
   return %compilerList;
}