function MainMenuGui::onAdd(%this)
{
   $activeControllerName = "K&M"; //default input type
   
   %this.isRefreshing = false;
}

function MainMenuGui::onWake(%this)
{
   $TorqueManager::gitNotFound = false;
   $TorqueManager::cmakeNotFound = false;
   
   //Set up our settings object
   %prefPath = getPrefpath();
   
   new Settings(PMSettings) { 
      file = %prefPath @ "/data.xml"; 
   };
   
   if(isObject(%this.navPages))
      %this.navPages.delete();
      
   %this.navPages = new ArrayObject();
      
   if(isObject(DownloadQueue))
      DownloadQueue.delete();
      
   new ArrayObject(DownloadQueue);
   DownloadQueue.empty();
   
   PMSettings.read();
   
   %this.registerPage("EngineBuildPage", "Engine Builds", "populateEngineBuildsList();");
   %this.registerPage("EngineBuildPropertiesPage", "Properties", "populateEngineBuildProperties();");
   %this.registerPage("NewEngineBuildPage", "New Engine Build Properties", "populateEngineBuildProperties(true);");
   
   %this.registerPage("ProjectsPage", "Projects", "populateProjectsList();");
   %this.registerPage("ProjectPropertiesPage", "Properties", "populateProjectProperties();");
   %this.registerPage("NewProjectPage", "New Project Properties", "populateProjectProperties(true);");
   
   %this.registerPage("ModulesPage", "Modules", "populateModulesList();");
   %this.registerPage("ModulePropertiesPage", "Properties", "populateModuleProperties();");
   %this.registerPage("NewModulePage", "New Module Properties", "populateModuleProperties(true);");
   
   %this.registerPage("SettingsPage", "Settings", "populateSettingsPage();");
   
   getResourcesData();
   
   //setupWizard();
   
   //check we have git and cmake commandline access
   /*%cmakeTestFilePath = getPrefpath() @ "/cmakeTest.txt";
   systemCommand("where cmake > " @ %cmakeTestFilePath);
   cmakeCheck();

   %gitTestFilePath = getPrefpath() @ "/gitTest.txt";
   systemCommand("where git > " @ %gitTestFilePath);
   gitCheck();*/
   
   //If needed, we'll run the setup for these
   //setupCommandLinePrograms();
   
   $showMenubar = true;
   
   //cheat a little so we can ensure that the font's ready to be processed for string length checks and the like
   GuiTagButtonProfile.getStringWidth("This is a preload sentence");
   
   //display the page
   if(getProjectCount() != 0)
      %this.goToPage("ProjectsPage");
   else
      %this.goToPage("EngineBuildPage");
}

function MainMenuGui::onSleep(%this)
{
   MainMenuButtonHolder.hidden = true;
}

function MainMenuGui::refresh(%this)
{
   if(%this.isRefreshing)
      return;
      
   %this.isRefreshing = true;
      
   %this.schedule(32, doRefresh);
}

function MainMenuGui::doRefresh(%this)
{
   %this.isRefreshing = false;
   if (getUsableEngineBuildsList() $= "No Valid Engine Builds")
   {
      MainMenuModulesBtn.setVisible(false);
      MainMenuProjectsBtn.setVisible(false);
   }
   else
   {
      MainMenuModulesBtn.setVisible(true);
      MainMenuProjectsBtn.setVisible(true);   
   }
   
   for(%i=0; %i < %this.navPages.count(); %i++)
   {
      %pageData = %this.navPages.getKey(%i);
      %pgNm = getToken(%pageData, ";", 0);
      if(%pgNm $= %this.currentPage)
      {
         %pgText = getToken(%pageData, ";", 1);
         %pgNav = %this.navPages.getValue(%i);
         
         CloseActionMenu();

         eval(%pgNav);
         break;
      }
   }
   
   //reboundary the stack, as sometimes resizes can cause stacks in stacks to be
   //weird
   MainViewStack.extent.x = MainViewScroll.extent.x;
   
   return;
   
   /*if(%this.currentPage $= "EngineBuildPage")
      populateEngineBuildsList();
   else if(%this.currentPage $= "EngineBuildPropertiesPage")
      populateEngineBuildProperties();
   else if(MainMenuHeaderText.text $= "Prototype Kits")
      populateRPKsList();
   else if(MainMenuHeaderText.text $= "Modules")
      populateModulesList();
   else if(MainMenuHeaderText.text $= "Projects")
      populateProjectsList();
   else if(MainMenuHeaderText.text $= "Settings")
      populateSettingsList();
      
   CloseActionMenu();  */
}

function MainMenuGui::goToPage(%this, %pageName)
{
   %pageIdx = %this.findNavPage(%pageName);
   if(%pageIdx != -1)
   {
      %pageData = %this.navPages.getKey(%pageIdx);
      %pgNm = getToken(%pageData, ";", 0);
      %this.currentPage = %pgNm;
      
      %this.refresh();
      pageSlideAnimation(); 
   }
}

function MainMenuGui::registerPage(%this, %pageName, %pageTitle, %navCommand)
{
   if(%this.findNavPage(%pageName) == -1)
      %this.navPages.add(%pageName @ ";" @ %pageTitle, %navCommand);
}

function MainMenuGui::findNavPage(%this, %pageName)
{
   for(%i=0; %i < %this.navPages.count(); %i++)
   {
      %pageData = %this.navPages.getKey(%i);
      %pgNm = getToken(%pageData, ";", 0);
      if(%pgNm $= %pageName)
      {
         return %i; 
      }
   }
   
   return -1;
}
//
function makeModuleCard(%moduleId)
{
   %moduleCount = getEngineBuildCount();
   
   if(%moduleCount <= %moduleId)
   {
      error("Invalid Module index: " @ %moduleId);
      return;
   }
   
   %gitPath = PMSettings.value("Modules/" @ %moduleId @ "/gitPath", "");
   %buildName = PMSettings.value("Modules/" @ %moduleId @ "/moduleName", "");
   %branchName = PMSettings.value("Modules/" @ %moduleId @ "/branchName", "");
   %localPath = PMSettings.value("Modules/" @ %moduleId @ "/localPath", "");
   %isDefault = PMSettings.value("Modules/" @ %moduleId @ "/isDefault", "0");
   %installStatus = PMSettings.value("Modules/" @ %moduleId @ "/installInNewProj", "0");
   
   %tooltip = "Engine Build Name: " @ %buildName @ "\n" @
                            "Git Path: " @ %gitPath @ "\n" @
                            "Git Branch: " @ %branchName @ "\n" @
                            "Local Path: " @ %localPath @ "\n" @
                            "Install in new Projects: " @ %installStatus @ "\n" @
                            "Is A Default Build: " @ %isDefault;
      
   %cardRowHeight = 20;
   %ModuleCardHeight = %cardRowHeight * 2;
   %ModuleCardButtonSize = 40;
   
   //We'll use this to adjust the height, so calc this ahead of time
   //run through metadata tags
   %tags = getModuleTags(%moduleId);
   %tokenCount = getTokenCount(%tags, ",;");
   
   %ModuleTextHeight = %ModuleCardHeight;
   
   if(%tokenCount != 0)
   {
      %ModuleCardHeight += %cardRowHeight + 5; //add another 'row' to the card
   }
   
   %ctrl = new GuiControl() {
      position = "0 0";
      extent = MainViewStack.extent.x SPC %ModuleCardHeight;
      horizSizing = "width";
      vertSizing = "bottom";
      profile = GuiMenuButtonProfile;
      minExtent = "100" SPC %ModuleCardHeight;
      
      new GuiTextCtrl() { 
         text = "  " @ %buildName;
         position = "0 0";
         extent = MainViewStack.extent.x -(%ModuleCardButtonSize * 2) SPC %ModuleTextHeight;
         horizSizing = "width";
         vertSizing = "bottom";
         profile = MenuSubHeaderText;
         tooltip = %tooltip;
         internalName = "label";
         margin = "0 10 0 0";
         tooltip = %tooltip;
      };
      
      new GuiBitmapButtonCtrl() {
         bitmapAsset = "ManagerUI:plus_image";
         position = MainViewStack.extent.x - (%ModuleCardButtonSize * 2) SPC %cardRowHeight / 2;
         extent = %ModuleCardButtonSize SPC %ModuleCardButtonSize;
         horizSizing = "left";
         vertSizing = "center";
         profile = GuiMenuButtonProfile;
         tooltip = "Create a new Project using this build";
         internalName = "actionButton";
      };
      
      new GuiBitmapButtonCtrl() {
         bitmapAsset = "ManagerUI:moreOptions_image";
         position = MainViewStack.extent.x - %ModuleCardButtonSize SPC %cardRowHeight / 2;
         extent = %ModuleCardButtonSize SPC %ModuleCardButtonSize;
         horizSizing = "left";
         vertSizing = "center";
         profile = GuiMenuButtonProfile;
         internalName = "optionsButton";
      };
   };
   
   if(%localPath !$= "")
   {
      //add the additional text line for our local path display  
      
      %ctrl-->label.extent.y = %cardRowHeight;
      
      %tooltip = new GuiMLTextCtrl() { 
         text = %localPath;
         position = "0" SPC %cardRowHeight;
         extent = MainViewStack.extent.x - (%ModuleCardButtonSize * 2) SPC %cardRowHeight;
         horizSizing = "width";
         vertSizing = "bottom";
         profile = MenuBodyText;
         internalName = "tooltip";
         tooltip = %tooltip;
         margin = "0 10 0 0";
      };
      
      %ctrl.add(%tooltip);
   }
   
   if(%tokenCount != 0)
   {
      %tagList = new GuiStackControl(){
         stackingType = "Horizontal";
         position = 10 SPC 40;
         extent = MainViewStack.extent.x - (%ModuleCardButtonSize * 2) SPC %cardRowHeight;
         padding = "5";  
      };
      
      %ctrl.add(%tagList);

      for(%t=0; %t < %tokenCount; %t++)
      {
         %tag = getToken(%tags, ",;", %t);
         %tagWidth = GuiTagButtonProfile.getStringWidth(%tag) + 5;
         %tagBtn = new GuiButtonCtrl() {
            profile = GuiTagButtonProfile;
            text = %tag;
            position = "0 0";
            extent = %tagWidth SPC %cardRowHeight;
            active = false;
         };
         
         %tagList.add(%tagBtn);
      }
   }
         
   return %ctrl;
}

/*function populateModulesList()
{
   MainViewStack.hidden = false;
   MainViewStack.clear();
   
   MainMenuGui.setActionBarVisible(true);
   
   MainMenuGui.mode = "Modules";
   
   ActionButtonPanelList.clear();
   
   MainMenuHeaderText.setText("Modules");
   
   %dlRoll = new GuiRolloutCtrl() { 
      caption = "Downloaded";
      extent = MainViewStack.extent.x SPC 40;
      profile = GuiMenuRolloutProfile;
      margin = "5 5 5 5";
      
      new GuiStackControl() {
         internalName = "stack";
         padding = "5";
      };
   };
   
   MainViewStack.add(%dlRoll);
   
   %availRoll = new GuiRolloutCtrl() { 
      caption = "Available For Download";
      extent = MainViewStack.extent.x SPC 40;
      profile = GuiMenuRolloutProfile;
      margin = "5 5 5 5";
      
      new GuiStackControl() {
         internalName = "stack";
         padding = "5";
      };
   };
   
   MainViewStack.add(%availRoll);
   
   %defaultModuleCount = getModuleCount();
   for(%i=0; %i < %defaultModuleCount; %i++)
   {
      %moduleName = PMSettings.value("Modules/" @ %i @ "/moduleName", "");
      %localPath = PMSettings.value("Modules/" @ %i @ "/localPath", "");
      %gitPath = PMSettings.value("Modules/" @ %i @ "/gitPath", "");
      if(%moduleName !$= "")
      {
         if(MainMenuGui.searchText !$= "")
         {
            %tags = getModuleTags(%i);
            if(!strIsMatchExpr("*" @ MainMenuGui.searchText @ "*", %moduleName) &&
               !isSearchTextInTags(%tags, MainMenuGui.searchText))
               continue;
         }
            
         %ctrl = makeModuleCard(%i);
         
         if(%localPath !$= "" && IsDirectory(%localPath))
         {
            %ctrl-->actionButton.command = "openInstallModuleWizard(" @ %i @ ");";
            
            %dlRoll-->stack.add(%ctrl);
         }
         else if(%localPath !$= "" && !IsDirectory(%localPath))
         {
            %ctrl-->actionButton.command = "findModulePath(" @ %i @ ");";
            
            %ctrl-->ActionButton.setBitmap("ManagerUI:zoom_image");
            
            %dlRoll-->stack.add(%ctrl);
         }
         else if(%gitPath !$= "")
         {
            %ctrl-->actionButton.setBitmap("ManagerUI:download_image");
            %availRoll-->stack.add(%ctrl);
            
            %ctrl-->actionButton.command = "downloadModule(" @ %i @ ");";
         }
         
         %isDefault = isModuleDefault(%i);
         %ctrl-->optionsButton.Command = "openModuleActionMenu(" @ %i @ ", " @ %ctrl-->optionsButton @ ");";
      }
   }
   
   //Now add our action panel buttons
   ActionButtonPanelList.clear();
   
   %actionBtn = new GuiIconButtonCtrl()
   {
      position = "0 0";
      extent = "100 45";
      profile = GuiMenuButtonProfile;
      buttonMargin = "0 -10";
      bitmapAsset = "ManagerUI:plus_image";
      iconLocation = "Center";
      sizeIconToButton = true;
      makeIconSquare = true;
      textLocation = "Bottom";
      text = "Add New";
      command = "openNewModuleWizard();";
   };
   
   ActionButtonPanelList.add(%actionBtn);
}*/

//
function makeRPKCard(%buildName)
{
   %editOptions = makeEngineBuildCard("");
   
   %editOptions-->newProjectButton.hidden = true;
   
   %roll = new GuiRolloutCtrl() { 
      caption = %buildName;
      extent = MainViewStack.extent.x SPC 40;
      profile = GuiMenuRolloutProfile;
      margin = "5 5 5 5";
      
      new GuiStackControl() {
         internalName = "stack";
         padding = "5";
      };
   };
   
   %roll-->stack.add(%editOptions);
   
   return %roll;
}

function makeRPKModuleListCard(%buildName)
{
   %engineBuildCardHeight = 40;
   
   %ctrl = new GuiControl() {
      position = "0 0";
      extent = MainViewStack.extent.x SPC %engineBuildCardHeight;
      horizSizing = "width";
      vertSizing = "bottom";
      profile = GuiMenuButtonProfile;
      minExtent = "100" SPC %engineBuildCardHeight;
      
      new GuiBitmapButtonCtrl() {
         bitmapAsset = "ManagerUI:checkmark_image";
         position = "0 0";
         extent = %engineBuildCardHeight SPC %engineBuildCardHeight;
         horizSizing = "right";
         vertSizing = "bottom";
         profile = GuiMenuButtonProfile;
         tooltip = "Create a new Project using this build";
         internalName = "newProjectButton";
      };
      
      new GuiTextCtrl() { 
         text = "   " @ %buildName;
         position = %engineBuildCardHeight SPC 0;
         extent = MainViewStack.extent.x -(%engineBuildCardHeight * 2) SPC %engineBuildCardHeight;
         horizSizing = "width";
         vertSizing = "bottom";
         profile = MenuHeaderText;
         tooltip = "This project is super neato\nVery neato indeed\nThe mostest neatoest";
         internalName = "engineBuildText";
         margin = "0 10 0 0";
      };
      
      new GuiBitmapButtonCtrl() {
         bitmapAsset = "ManagerUI:moreOptions_image";
         position = MainViewStack.extent.x - %engineBuildCardHeight SPC 0;
         extent = %engineBuildCardHeight SPC %engineBuildCardHeight;
         horizSizing = "left";
         vertSizing = "bottom";
         profile = GuiMenuButtonProfile;
         internalName = "optionsButton";
      };
   };
   
   return %ctrl;
}

function populateRPKsList()
{
   MainViewStack.hidden = false;
   MainViewStack.clear();
   
   ActionButtonPanelList.clear();
   
   MainMenuHeaderText.setText("Prototype Kits");
   
   %module = makeRPKModuleListCard("Module Name");
   %moduleTwo = makeRPKModuleListCard("Other Module Name");
   
   %roll = makeRPKCard("FPS Gameplay Kit");
   
   %roll-->stack.add(%module);
   %roll-->stack.add(%moduleTwo);
   
   MainViewStack.add(%roll);
}

//

function makeProjectCard(%projectId)
{
   %projectCount = getProjectCount();
   
   if(%projectCount <= %projectId)
   {
      error("Invalid Project index: " @ %projectId);
      return;
   }
   
   %projectName = getProjectNameByIndex(%projectId);
   %localPath = getProjectLocalPathByIndex(%projectId);
   %previewImage = getProjectPreviewImageByIndex(%projectId);
   
   if(%previewImage $= "")
   {
      %previewImage = "ManagerUI:BlankProjectImage_image";
   }
   
   %tooltip = "Project Name: " @ %projectName @ "\n" @
                            "Local Path: " @ %localPath;
                            
   %cardHeight = 100;
   %rowHeight = 20;
   %buttonHeight = 40;
   %projectImageWidth = 150;
   %pad = 10;
   
   %ctrl = new GuiControl() {
      position = "0 0";
      extent = MainViewStack.extent.x SPC %cardHeight;
      horizSizing = "width";
      vertSizing = "bottom";
      profile = GuiMenuButtonProfile;
      minExtent = "100" SPC %cardHeight;
      
      new GuiBitmapCtrl() {
         bitmapAsset = %previewImage;
         position = 5 SPC 5;
         extent = %projectImageWidth - %pad SPC %cardHeight - %pad;
         horizSizing = "right";
         vertSizing = "center";
         profile = GuiMenuButtonProfile;
         tooltip = "";
         internalName = "newProjectButton";
      };
      
      new GuiTextCtrl() { 
         text = %projectName;
         position = %projectImageWidth SPC %pad;
         extent = MainViewStack.extent.x -(%buttonHeight * 2) - %projectImageWidth SPC %rowHeight;
         horizSizing = "width";
         vertSizing = "bottom";
         profile = MenuSubHeaderText;
         tooltip = "This project is super neato\nVery neato indeed\nThe mostest neatoest";
         internalName = "projectNameText";
         margin = "0 10 0 0";
      };
      
      new GuiTextCtrl() { 
         text = %localPath;
         position = %projectImageWidth SPC %rowHeight + %pad;
         extent = MainViewStack.extent.x -(%buttonHeight * 2) - %projectImageWidth SPC %rowHeight;
         horizSizing = "width";
         vertSizing = "bottom";
         profile = MenuBodyText;
         internalName = "localPathText";
         margin = "0 10 0 0";
      };
      
      new GuiBitmapButtonCtrl() {
         bitmapAsset = "ManagerUI:right_image";
         position = MainViewStack.extent.x - (%buttonHeight * 2) SPC ((%cardHeight - %buttonHeight) / 2);
         extent = %buttonHeight SPC %buttonHeight;
         horizSizing = "left";
         vertSizing = "center";
         profile = GuiMenuButtonProfile;
         tooltip = "Launch the Project";
         internalName = "actionButton";
      };
      
      new GuiBitmapButtonCtrl() {
         bitmapAsset = "ManagerUI:moreOptions_image";
         position = MainViewStack.extent.x - %buttonHeight SPC ((%cardHeight - %buttonHeight) / 2);
         extent = %buttonHeight SPC %buttonHeight;
         horizSizing = "left";
         vertSizing = "center";
         profile = GuiMenuButtonProfile;
         internalName = "optionsButton";
      };
   };
   
   %ctrl-->optionsButton.Command = "openProjectActionMenu("@%projectId@", " @ %ctrl-->optionsButton @ ");";
   
   //We'll use this to adjust the height, so calc this ahead of time
   //run through metadata tags
   %buildId = getProjectBuildIdByIndex(%projectId);
   %tags = getEngineBuildTags(%buildId);
   %tokenCount = getTokenCount(%tags, ",;");
   if(%tokenCount != 0)
   {
      %tagList = new GuiStackControl(){
         stackingType = "Horizontal";
         position = %projectImageWidth SPC %rowHeight * 3;
         extent = MainViewStack.extent.x -(%buttonHeight * 2) - %projectImageWidth SPC %rowHeight;
         padding = "5";  
      };
      
      %ctrl.add(%tagList);
      
      for(%t=0; %t < %tokenCount; %t++)
      {
         %tag = getToken(%tags, ",;", %t);
         
         if(%tag $= "Default")
            continue;
            
         %tagWidth = GuiTagButtonProfile.getStringWidth(%tag) + 5;
         %tagBtn = new GuiButtonCtrl() {
            profile = GuiTagButtonProfile;
            text = %tag;
            position = "0 0";
            extent = %tagWidth SPC %rowHeight;
            active = false;
         };
         
         %tagList.add(%tagBtn);
      }
   }
   
   return %ctrl;
}



//==============================================================================

function makeSettingsCard(%label, %settingsVar, %type, %defaultValue, %subLabel, %tooltip, %command)
{
   %settingsCardHeight = 40;
   
   %buttonWidth = 75;
   %buttonPad = 6;
      
   %ctrl = 0;
   
   if(%type $= "button")
   {
      %ctrl = new GuiControl() {
         position = "0 0";
         extent = MainViewStack.extent.x SPC %settingsCardHeight;
         horizSizing = "width";
         vertSizing = "bottom";
         profile = GuiPanelProfile;
         minExtent = "100" SPC %settingsCardHeight;
         settingsVar = %settingsVar;
         
         new GuiTextCtrl() { 
            text = "   " @ %label;
            position = "0 0";
            extent = MainViewStack.extent.x - %buttonWidth SPC %settingsCardHeight;
            horizSizing = "width";
            vertSizing = "bottom";
            profile = MenuHeaderText;
            tooltip = %tooltip;
            internalName = "label";
            margin = "0 10 0 0";
         };
         
         new GuiButtonCtrl() {
            position = MainViewStack.extent.x - %buttonWidth SPC %buttonPad;
            extent = %buttonWidth SPC %settingsCardHeight - (%buttonPad *2);
            horizSizing = "left";
            vertSizing = "center";
            buttonMargin = "40 2";
            profile = GuiMenuButtonProfile;
            text = "Change";
            tooltip = "Change";
            internalName = "optionsButton";
            command = %command;
         };
      };
   }
   else if(%type $= "bool")
   {
      %ctrl = new GuiControl() {
         position = "0 0";
         extent = MainViewStack.extent.x SPC %settingsCardHeight;
         horizSizing = "width";
         vertSizing = "bottom";
         profile = GuiPanelProfile;
         minExtent = "100" SPC %settingsCardHeight;
         settingsVar = %settingsVar;
         
         new GuiTextCtrl() { 
            text = "   " @ %label;
            position = "0 0";
            extent = MainViewStack.extent.x - %buttonWidth SPC %settingsCardHeight;
            horizSizing = "width";
            vertSizing = "bottom";
            profile = MenuHeaderText;
            tooltip = %tooltip;
            internalName = "label";
            margin = "0 10 0 0";
         };
         
         new GuiCheckBoxCtrl() {
            position = MainViewStack.extent.x - (%buttonWidth/2) SPC (%settingsCardHeight / 2) - 10;
            extent = "20" SPC %settingsCardHeight;
            horizSizing = "left";
            vertSizing = "center";
            buttonMargin = "40 2";
            profile = GuiMenuCheckboxProfile;
            text = "";
            internalName = "optionsButton";
            command = %command;
            variable = %settingsVar;
         };
      };
      
      %ctrl-->optionsButton.setStateOn(%defaultValue);
   }
   else if(%type $= "string")
   {
      %ctrl = new GuiControl() {
         position = "0 0";
         extent = MainViewStack.extent.x SPC %settingsCardHeight;
         horizSizing = "width";
         vertSizing = "bottom";
         profile = GuiPanelProfile;
         minExtent = "100" SPC %settingsCardHeight;
         settingsVar = %settingsVar;
         tooltip = %tooltip;
         
         new GuiTextCtrl() { 
            text = "   " @ %label;
            position = "0 0";
            extent = MainViewStack.extent.x - %buttonWidth SPC %settingsCardHeight;
            horizSizing = "width";
            vertSizing = "bottom";
            profile = MenuHeaderText;
            tooltip = %tooltip;
            internalName = "label";
            margin = "0 10 0 0";
            tooltip = %tooltip;
         };
         
         new GuiButtonCtrl() {
            position = MainViewStack.extent.x - %buttonWidth SPC %buttonPad;
            extent = %buttonWidth SPC %settingsCardHeight - (%buttonPad *2);
            horizSizing = "left";
            vertSizing = "center";
            buttonMargin = "40 2";
            profile = GuiMenuButtonProfile;
            text = "Edit";
            tooltip = "Edit";
            internalName = "optionsButton";
            command = %command;
         };
      };
   }
   
   if(%subLabel !$= "")
   {
      %ctrl-->label.extent = MainViewStack.extent.x - %buttonWidth SPC (%settingsCardHeight / 2);
      
      %tooltipCtrl = new GuiMLTextCtrl() { 
         class = "SettingsTooltip";
         text = %subLabel;
         position = "0" SPC (%settingsCardHeight / 2);
         extent = MainViewStack.extent.x - %buttonWidth SPC (%settingsCardHeight / 2);
         horizSizing = "width";
         vertSizing = "bottom";
         profile = MenuBodyText;
         internalName = "tooltip";
         margin = "0 10 0 0";
         tooltip = %tooltip;
      };
      
      %ctrl.add(%tooltipCtrl);
   }
   
   //edit controls added here, taking up half the extent
   
   return %ctrl;
}

function SettingsTooltip::onResize(%this, %x, %y)
{
   %stringWidth = %this.profile.getStringWidth(%this.getText());
   
   if(%stringWidth > %x)
   {
      //too long, so lets ensure that our option is expanded to give it room  
      %this.getParent().extent.y = 60;
   } 
}

function populateSettingsList()
{
   MainViewStack.hidden = false;
   MainViewStack.clear();
   
   MainMenuGui.setActionBarVisible(false);
   
   ActionButtonPanelList.clear();
   
   MainMenuHeaderText.setText("Settings");
   
   //
   %downloadPath = PMSettings.value("Settings/EngineBuilds/downloadPath", "{ManagerDir}/EngineBuilds/");
   %field = makeSettingsCard("Engine Build Download Path", "$TorqueManager::engineBuildDLPath", "button", %downloadPath, %downloadPath,
      "The path for the engine builds that are downloaded to be placed in. Can use '{ManagerDir}' as a special keyword to ensure it is always the Manager's current filepath",
      "changeEngineBuildDownloadPath();");
   MainViewStack.add(%field);
   
   //
   %downloadPath = PMSettings.value("Settings/Modules/downloadPath", "{ManagerDir}/Modules/");
   %field = makeSettingsCard("Modules Download Path", "$TorqueManager::moduleDLPath", "button", %downloadPath, %downloadPath,
      "The path for the modules that are downloaded to be placed in. Can use '{ManagerDir}' as a special keyword to ensure it is always the Manager's current filepath",
      "changeModuleDownloadPath();");
   MainViewStack.add(%field);
   
   //%field = makeSettingsCard("Always Install Modules on New Project", $TorqueManager::alwaysInstallModules, "bool", false, 
   //   "Indicates if modules should be marked as being 'Install on new project' by default.");
   //MainViewStack.add(%field);
   
   //%field = makeSettingsCard("Other Option", $TorqueManager::alwaysInstallModules, "bool", false, 
   //   "");
   //MainViewStack.add(%field);
}

function isSearchTextInTags(%tags, %text)
{
   %tokenCount = getTokenCount(%tags, ",;");
   if(%tokenCount == 0)
      return false;
      
   for(%t=0; %t < %tokenCount; %t++)
   {
      %tag = getToken(%tags, ",;", %t);
      
      if(strIsMatchExpr("*" @ %text @ "*", %tag))
         return true;
   }
   
   return false;
}
//==============================================================================
//
//==============================================================================
function MainMenuGui::setActionBarVisible(%this, %set)
{
   if(%set!$= "")
      $showMenubar = %set;
   else
      $showMenubar = !$showMenubar;
      
   ActionButtonPanelContainer.setHidden(!$showMenubar);
}

function MainMenuGui::setSearchbarVisible(%this, %set)
{
   MainMenuSearchBar.hidden = %set;
   MainMenuSearchClearBtn.hidden = %set;  
}

//==============================================================================
//
//==============================================================================
function MainMenuGui::onReturnTo(%this)
{
   MainMenuButtonList.hidden = false;
   MainMenuButtonList.setFirstResponder();
   MainMenuButtonHolder.setActive();
   MainMenuButtonList.setAsActiveMenuList();
}

//==============================================================================
//
//==============================================================================
function MainMenuSearchBar::onReturn(%this)
{
   %this.clearFirstResponder();
}

function MainMenuSearchBar::updateSearchText(%this)
{
   MainMenuGui.searchText = %this.getText();
   if(MainMenuGui.searchText !$= "")
   {
      MainMenuSearchClearBtn.setBitmap("ManagerUI:cross_image"); 
   }
   else
   {
      MainMenuSearchClearBtn.setBitmap("ManagerUI:zoom_image");
   }
   
   MainMenuGui.refresh();
}

function MainMenuSearchBar::clearSearchText(%this)
{
   MainMenuGui.searchText = "";
   %this.setText("");
   MainMenuSearchClearBtn.setBitmap("ManagerUI:cross_image");
   //MainMenuSearchClearBtn.setBitmap("ManagerUI:zoom_image"); 
   
   %this.clearFirstResponder();
   
   MainMenuGui.refresh();
}

function selectSearchbar()
{
   MainMenuSearchBar.setFirstResponder();
}

function navigateBack()
{
   %breadcrumbCount = getTokenCount(MainMenuGui.navStack, ",;");
   if(%breadcrumbCount > 1)
   {
      %pageName = getToken(MainMenuGui.navStack, ",;", %breadcrumbCount-2);
      MainMenuGui.goToPage(%pageName);
   }
}

//==============================================================================
function gitCheck()
{
   %testFilePath = getPrefpath() @ "/gitTest.txt";
   if(isFile(%testFilePath))
   {
      %fl = new FileObject();
      %fl.openForRead(%testFilePath);
      if(!%fl.isEOF())
         %lineResult = %fl.readLine();
      %fl.delete();
      
      if(%lineResult $= "" || strstr(%lineResult, "not found") !$= -1)
      {
         $TorqueManager::gitNotFound = true;
      }
   }
}

function cmakeCheck()
{
   %testFilePath = getPrefpath() @ "/cmakeTest.txt";
   if(isFile(%testFilePath))
   {
      %fl = new FileObject();
      %fl.openForRead(%testFilePath);
      if(!%fl.isEOF())
         %lineResult = %fl.readLine();
      %fl.delete();
      
      if(%lineResult $= "" || strstr(%lineResult, "not found") !$= -1)
      {
         $TorqueManager::cmakeNotFound = true;
      }
   }
}

function setupCommandLinePrograms()
{
   if(!$TorqueManager::needToInstallGit && !$TorqueManager::needToInstallCmake)
      return;
      
   setupWizard();
   
   ManagerWizardWindow.text = "Setup Command Line Programs";
   
   if($TorqueManager::needToInstallGit == true)
      ManagerWizardWindow.addWizardPage(setupGitCmakePage0);
      
   if($TorqueManager::needToInstallCmake == true)
      ManagerWizardWindow.addWizardPage(setupGitCmakePage1);
   
   ManagerWizardWindow.setStep(0); 
   
   ManagerWizardWindow.hidden = false;  
   ManagerWizardWindow.selectWindow();
}
//==============================================================================
//
//==============================================================================
function ManagerWizardWindow::onVisible(%this, %state)
{
   WizardBackground.setHidden(!%state);
}

//==============================================================================
// Breadcrumbs
//==============================================================================
function updateBreadcrumbList(%breadcrumbs)
{
   BreadcrumbStack.clear();
   
   %breadcrumbCount = getTokenCount(%breadcrumbs, ",;");
   MainMenuGui.navStack = %breadcrumbs;
   
   for(%i = 0; %i < %breadcrumbCount - 1; %i++)
   {
      %breadcrumb = getToken(%breadcrumbs, ",;", %i);
      
      %pageIdx = MainMenuGui.findNavPage(%breadcrumb);
      if(%pageIdx != -1)
      {
         %pageData = MainMenuGui.navPages.getKey(%pageIdx);
         %pgTitle = getToken(%pageData, ";", 1);
         %pgNav = MainMenuGui.navPages.getValue(%pageIdx);
         
         %crumbWidth = GuiMenuButtonProfile.getStringWidth(%pgTitle) + 5;
      
         %crumbCtrl = new GuiButtonCtrl() {
            text = %pgTitle;
            command = %pgNav;
            horizSizing = "right";
            vertSizing = "center";
            extent = %crumbWidth SPC BreadcrumbStack.extent.y;
            position = "0 0";
            profile = GuiMenuButtonProfile;
         };
         
         BreadcrumbStack.add(%crumbCtrl);
         
         %crumbSpaceCtrl = new GuiTextCtrl() { 
            text = ">";
            position = "0 0";
            extent = 20 SPC BreadcrumbStack.extent.y;
            horizSizing = "right";
            vertSizing = "center";
            profile = GuiMenuButtonProfile;
         };
         
         BreadcrumbStack.add(%crumbSpaceCtrl);
      }
   }
   
   if(%breadcrumbCount != 0)
   {
      %breadcrumb = getToken(%breadcrumbs, ",;", %breadcrumbCount-1);  
      
      %pageIdx = MainMenuGui.findNavPage(%breadcrumb);
      if(%pageIdx != -1)
      {
         %pageData = MainMenuGui.navPages.getKey(%pageIdx);
         %pgTitle = getToken(%pageData, ";", 1); 
      
         %crumbWidth = GuiMenuButtonProfile.getStringWidth(%pgTitle) + 5;
         
         %lastCrumbCtrl = new GuiTextCtrl() { 
            text = %pgTitle;
            position = "0 0";
            extent = %crumbWidth SPC BreadcrumbStack.extent.y;
            horizSizing = "right";
            vertSizing = "center";
            profile = GuiMenuButtonProfile;
         };
         
         BreadcrumbStack.add(%lastCrumbCtrl);
      }
   }
}
//==============================================================================
// Nav Animations
//==============================================================================
function navToAnimation()
{
   return;
   
   /*MainViewScroll.previousPosition = MainViewScroll.position;
   MainViewScroll.position.x = MainViewScroll.extent.x / 3;
   
   MainMenuGui.pageTween = Tweener.toOnce(150, MainViewScroll, "position:" @ MainViewScroll.previousPosition, "");
   MainMenuGui.pageTween.play();*/
}

function navBackAnimation()
{
   return;
   
   /*MainViewScroll.previousPosition = MainViewScroll.position;
   MainViewScroll.position.x = - MainViewScroll.extent.x / 3;
   
   MainMenuGui.pageTween = Tweener.toOnce(150, MainViewScroll, "position:" @ MainViewScroll.previousPosition, "");
   MainMenuGui.pageTween.play();*/
}

function pageSlideAnimation()
{
   return;
   
   /*MainViewScroll.previousPosition = MainViewScroll.position;
   MainViewScroll.position.y = MainViewScroll.extent.y / 3;
   
   MainMenuGui.pageTween = Tweener.toOnce(150, MainViewScroll, "position:" @ MainViewScroll.previousPosition, "");
   MainMenuGui.pageTween.play();*/
}
//==============================================================================
//
//==============================================================================
function createCard(%mainText, %subText, %tagsList, %tooltip, %hasNavigation, %navCommand, %actionType, %actionData, %actionDefaultValue, %actionCommand, %targetVariable, %insetCount)
{
   %pad = 5;
   %cardRowHeight = 20;
   %cardHeight = %cardRowHeight * 2;
   %engineBuildCardButtonSize = 40;
   %engineBuildTextHeight = %cardHeight;
   %actionCtrlWidth = 150;
   
   %navButtonImage = "";
   if(%hasNavigation)
      %navButtonImage = "ManagerUI:nextOption_n_image";
      
   %tagCount = getTokenCount(%tagsList, ",;");
   if(%tagCount != 0)
   {
      %cardHeight += %cardRowHeight + 5; //add another 'row' to the card
   }
   
   if(%insetCount $= "")
      %insetCount = 0;
   
   %navArrowMargin = (%cardHeight > (%cardRowHeight * 2)) ? 20 : 8;
      
   %ctrl = new GuiControl() {
      position = "0 0";
      extent = MainViewStack.extent.x SPC %cardHeight;
      horizSizing = "width";
      vertSizing = "bottom";
      profile = GuiMenuButtonProfile;
      minExtent = "100" SPC %cardHeight;
      
      new GuiIconButtonCtrl() {
         bitmapAsset = %navButtonImage;
         command = %navCommand;
         horizSizing = "width";
         vertSizing = "height";
         iconLocation = "Right";
         sizeIconToButton = true;
         makeIconSquare = true;
         buttonMargin = "0" SPC %navArrowMargin;
         position = "0 0";
         extent = MainViewStack.extent.x SPC %cardHeight;
         profile = GuiMenuButtonProfile;
         tooltip = %tooltip;
         internalName = "btn";
      };
      
      new GuiTextCtrl() { 
         text = "  " @ %mainText;
         position = "0 0";
         extent = MainViewStack.extent.x -(%engineBuildCardButtonSize * 2) SPC %engineBuildTextHeight;
         horizSizing = "width";
         vertSizing = "bottom";
         profile = MenuSubHeaderText;
         tooltip = %tooltip;
         internalName = "label";
         margin = "0 10 0 0";
      };
      
      /*new GuiBitmapButtonCtrl() {
         bitmapAsset = "ManagerUI:plus_image";
         position = MainViewStack.extent.x - (%engineBuildCardButtonSize * 2) SPC %cardRowHeight / 2;
         extent = %engineBuildCardButtonSize SPC %engineBuildCardButtonSize;
         horizSizing = "left";
         vertSizing = "center";
         profile = GuiMenuButtonProfile;
         tooltip = "Create a new Project using this build";
         internalName = "actionButton";
      };
      
      new GuiBitmapButtonCtrl() {
         bitmapAsset = "ManagerUI:moreOptions_image";
         position = MainViewStack.extent.x - %engineBuildCardButtonSize SPC %cardRowHeight / 2;
         extent = %engineBuildCardButtonSize SPC %engineBuildCardButtonSize;
         horizSizing = "left";
         vertSizing = "center";
         profile = GuiMenuButtonProfile;
         internalName = "optionsButton";
      };*/
   };
   
   //ensure the height is right for the button
   %ctrl-->btn.extent = %ctrl.extent;
   
   if(%subText !$= "")
   {
      //add the additional text line for our local path display  
      
      %ctrl-->label.extent.y = %cardRowHeight;
      
      %subTextLine = new GuiMLTextCtrl() { 
         text = %subText;
         position = "0" SPC %cardRowHeight;
         extent = MainViewStack.extent.x - (%engineBuildCardButtonSize * 2) SPC %cardRowHeight;
         horizSizing = "width";
         vertSizing = "bottom";
         profile = MenuBodyText;
         internalName = "tooltip";
         margin = "0 10 0 0";
      };
      
      %ctrl.add(%subTextLine);
   }
   
   %tagCount = getTokenCount(%tagsList, ",;");
   if(%tagCount != 0)
   {
      %tagStack = new GuiStackControl(){
         stackingType = "Horizontal";
         position = 10 SPC 40;
         extent = MainViewStack.extent.x -(%engineBuildCardButtonSize * 2) SPC %cardRowHeight;
         padding = "5";  
      };
      
      %ctrl.add(%tagStack);
      
      for(%t=0; %t < %tagCount; %t++)
      {
         %tag = getToken(%tagsList, ",;", %t);
         %tagWidth = GuiTagButtonProfile.getStringWidth(%tag) + 5;
         %tagBtn = new GuiButtonCtrl() {
            profile = GuiTagButtonProfile;
            text = %tag;
            position = "0 0";
            extent = %tagWidth SPC %cardRowHeight;
            active = false;
         };
         
         %tagStack.add(%tagBtn);
      }
   }
   
   if(%actionType !$= "")
   {
      %actionExtent = %actionCtrlWidth SPC %engineBuildTextHeight;
      %actionPosition = (%ctrl.extent.x - %actionExtent.x) SPC 20;
      
      if(%hasNavigation)
      {
         //nudge us back so we give the nav arrow room
         %actionPosition.x -= 20; 
         %actionExtent.x -= 20;
      }
      
      if(%actionType $= "Button")
      {
         %actionPosition.x -= %pad;
         %actionExtent.y = %cardRowHeight;
         %actionPosition.y = (%ctrl.extent.y/2) - (%actionExtent.y/2);
         
         %actionCtrl = new GuiButtonCtrl() {
            text = %actionDefaultValue;
            command = %actionCommand;
            horizSizing = "left";
            vertSizing = "center";
            extent = %actionExtent;
            position = %actionPosition;
            profile = GuiMenuActionButtonProfile;
         };
         
         %ctrl.add(%actionCtrl);
      }
      else if(%actionType $= "Dropdown")
      {
         %actionCtrl = new GuiPopUpMenuCtrlEx() {
            text = %actionDefaultValue;
            command = %actionCommand;
            horizSizing = "left";
            vertSizing = "center";
            extent = %actionExtent.x SPC 20;
            position = %actionPosition.x SPC 20;
            profile = GuiMenuPopUpMenuProfile;
         };
         
         %dropdownList = getTokenCount(%actionData, ",;");
         for(%j = 0; %j < %dropdownList; %j++)
         {
            %lineText = getToken(%actionData, ",;", %j);
            %actionCtrl.add(%lineText);
         }
         
         %ctrl.add(%actionCtrl);
         
         //There's some odd secondary scaling happening after the action control is getting added
         //so we'll just force the position and stuff here
         %actionCtrl.extent.y = %cardRowHeight;
         %actionCtrl.position.y = %cardRowHeight;
      }
      else if(%actionType $= "TextEdit")
      {
         %actionCtrl = new GuiTextEditCtrl() {
            text = %actionDefaultValue;
            command = %actionCommand;
            horizSizing = "left";
            vertSizing = "center";
            extent = %actionExtent;
            position = %actionPosition;
            profile = GuiMenuTextEditProfile;
         };
         
         %ctrl.add(%actionCtrl);
         
         //There's some odd secondary scaling happening after the action control is getting added
         //so we'll just force the position and stuff here
         %actionCtrl.extent.x = %actionCtrlWidth * 2;
         %actionCtrl.position.x -= %actionCtrlWidth + %pad;
         %actionCtrl.extent.y = %cardRowHeight;
         %actionCtrl.position.y = %cardRowHeight/2;
      }
      else if(%actionType $= "Checkbox")
      {
         %actionExtent = 60 SPC %engineBuildTextHeight;
         %actionPosition = (%ctrl.extent.x - %actionExtent.x) - 5 SPC 0;
         
         if(%hasNavigation)
            %actionPosition.x -= 20; 
         
         %onText = "On";
         %offText = "Off";
         
         if(%actionData !$= "" && getTokenCount(%actionData, ";") == 2)
         {
             %offText = getToken(%actionData, ",;", 0); 
             %onText = getToken(%actionData,  ",;", 1);
         }
         
         %optionText = %actionDefaultValue ? %onText : %offText;
      
         %actionCtrl = new GuiCheckboxCtrl() {
            text = %optionText;
            command = %actionCommand;
            horizSizing = "left";
            vertSizing = "center";
            extent = %actionExtent;
            position = %actionPosition;
            profile = GuiMenuCheckboxProfile;
         };
         
         %actionCtrl.setStateOn(%actionDefaultValue);
         
         %ctrl.add(%actionCtrl);
      }
      else if(%actionType $= "PreviewImage")
      {
         %projectImageWidth = 150;      
         
         %actionCtrl = new GuiBitmapCtrl() {
            bitmapAsset = %actionDefaultValue;
            horizSizing = "left";
            vertSizing = "center";
            extent = %projectImageWidth SPC %CardHeight;
            position = %projectImageWidth SPC 0;
            profile = GuiMenuTextEditProfile;
         };
         
         %ctrl.add(%actionCtrl);
         
         //There's some odd secondary scaling happening after the action control is getting added
         //so we'll just force the position and stuff here
         %actionCtrl.extent.y = %cardRowHeight;
         %actionCtrl.position.y = %cardRowHeight;
      }
      
      %actionCtrl.variable = %targetVariable;
   }
   
   //inset as needbe
   %insetAmount = %insetCount * 20;
   %ctrl-->btn.position.x += %insetAmount;
   %ctrl-->btn.extent.x -= %insetAmount;
   %ctrl-->label.position.x += %insetAmount;
   %ctrl-->label.extent.x -= %insetAmount;
   
   if(isObject(%subTextLine))
   {
      %subTextLine.position.x += %insetAmount;
      %subTextLine.extent.x -= %insetAmount;
   }
   
   if(isObject(%tagStack))
   {
      %tagStack.position.x += %insetAmount;
      %tagStack.extent.x -= %insetAmount;
   }
   
   return %ctrl;
}

function createOKCancelCard(%okButtonText, %cancelButtonText, %okButtonCommand, %cancelButtonCommand)
{
   %pad = 5;
   %cardRowHeight = 20;
   %cardHeight = %cardRowHeight * 2;
   %engineBuildCardButtonSize = 40;
   %engineBuildTextHeight = %cardHeight;
   %actionCtrlWidth = 150;
      
   %ctrl = new GuiControl() {
      position = "0 0";
      extent = MainViewStack.extent.x SPC %cardHeight;
      horizSizing = "width";
      vertSizing = "bottom";
      profile = GuiMenuBackgroundProfile;
      minExtent = "100" SPC %cardHeight;
      
      new GuiButtonCtrl() {
         text = %okButtonText;
         command = %okButtonCommand;
         horizSizing = "left";
         vertSizing = "center";
         extent = %actionCtrlWidth SPC %cardRowHeight;
         position = MainViewStack.extent.x - (%actionCtrlWidth * 2) - (%pad * 2) SPC %cardRowHeight/2;
         profile = GuiMenuActionButtonProfile;
         internalName = "okButton";
      };
      
      new GuiButtonCtrl() {
         text = %cancelButtonText;
         command = %cancelButtonCommand;
         horizSizing = "left";
         vertSizing = "center";
         extent = %actionCtrlWidth SPC %cardRowHeight;
         position = MainViewStack.extent.x - %actionCtrlWidth - %pad SPC %cardRowHeight/2;
         profile = GuiMenuActionButtonProfile;
         internalName = "cancelButton";
      };
   };
   
   if(%okButtonText $= "" && %okButtonCommand $= "")
      %ctrl-->okButton.setHidden(true);
   
   if(%cancelButtonText $= "" && %cancelButtonCommand $= "")
      %ctrl-->cancelButton.setHidden(true);
   
   return %ctrl;
}

function createEditCard(%label, %type, %variable, %tooltip, %data, %enabled, %insetCount)
{
   if(%enabled $= "")
      %enabled = true;
      
   if(%insetCount $= "")
      %insetCount = 0;
      
   %pad = 5;
   %cardRowHeight = 20;
   %cardHeight = %cardRowHeight * 2;
   %engineBuildCardButtonSize = 40;
   %engineBuildTextHeight = %cardHeight;
   %actionCtrlWidth = 150;
   
   %getValueCommand = "$result = " @ %variable @ ";";
   eval(%getValueCommand);
   %defaultValue = $result;
      
   %ctrl = new GuiControl() {
      position = "0 0";
      extent = MainViewStack.extent.x SPC %cardHeight;
      horizSizing = "width";
      vertSizing = "bottom";
      profile = GuiMenuButtonProfile;
      minExtent = "100" SPC %cardHeight;
      
      new GuiButtonCtrl() {
         horizSizing = "width";
         vertSizing = "height";
         iconLocation = "Right";
         sizeIconToButton = true;
         makeIconSquare = true;
         buttonMargin = "0 20";
         position = "0 0";
         extent = MainViewStack.extent.x SPC %cardHeight;
         profile = GuiMenuButtonProfile;
         internalName = "btn";
      };
      
      new GuiTextCtrl() { 
         text = %label;
         position = %pad SPC 0;
         extent = MainViewStack.extent.x -(%engineBuildCardButtonSize * 2) SPC %engineBuildTextHeight;
         horizSizing = "width";
         vertSizing = "bottom";
         profile = MenuSubHeaderText;
         internalName = "label";
         margin = "0 10 0 0";
      };
   };
   
   //ensure the height is right for the button
   %ctrl-->btn.extent = %ctrl.extent;
   
   if(%tooltip !$= "")
   {
      //add the additional text line for our local path display  
      
      %ctrl-->label.extent.y = %cardRowHeight;
      
      %subTextLine = new GuiMLTextCtrl() { 
         text = %tooltip;
         position = "0" SPC %cardRowHeight;
         extent = MainViewStack.extent.x - (%engineBuildCardButtonSize * 2) SPC %cardRowHeight;
         horizSizing = "width";
         vertSizing = "bottom";
         profile = MenuBodyText;
         internalName = "tooltip";
         margin = "0 10 0 0";
      };
      
      %ctrl.add(%subTextLine);
   }
   
   %actionExtent = %actionCtrlWidth SPC %engineBuildTextHeight;
   %actionPosition = (%ctrl.extent.x - %actionExtent.x) SPC 20;
   
   if(%type $= "Dropdown")
   {
      %actionCtrl = new GuiPopUpMenuCtrlEx() {
         text = %defaultValue;
         horizSizing = "left";
         vertSizing = "center";
         extent = %actionExtent.x SPC 20;
         position = %actionPosition.x SPC 20;
         profile = GuiMenuPopUpMenuProfile;
         internalName = "actionCtrl";
      };
      
      %dropdownList = getTokenCount(%data, ",;");
      for(%j = 0; %j < %dropdownList; %j++)
      {
         %lineText = getToken(%data, ",;", %j);
         %actionCtrl.add(%lineText);
      }
      
      %actionCtrl.command = "dropdownCardChanged(" @ %actionCtrl @ ");";
      
      %ctrl.add(%actionCtrl);

      //There's some odd secondary scaling happening after the action control is getting added
      //so we'll just force the position and stuff here
      %actionCtrl.extent.x = %actionCtrlWidth * 2;
      %actionCtrl.position.x -= %actionCtrlWidth + %pad;
      %actionCtrl.extent.y = %cardRowHeight;
      %actionCtrl.position.y = %cardRowHeight/2;
      
      %id = %actionCtrl.findText(%defaultValue);
      %actionCtrl.setSelected(%id);
   }
   else if(%type $= "TextEdit")
   {
      %actionCtrl = new GuiTextEditCtrl() {
         text = %defaultValue;
         horizSizing = "left";
         vertSizing = "center";
         extent = %actionExtent;
         position = %actionPosition;
         profile = GuiMenuTextEditProfile;
         internalName = "actionCtrl";
      };
      
      %actionCtrl.validate = "textEditCardChanged(" @ %actionCtrl @ ");";
      
      %ctrl.add(%actionCtrl);
      
      //There's some odd secondary scaling happening after the action control is getting added
      //so we'll just force the position and stuff here
      %actionCtrl.extent.x = %actionCtrlWidth * 2;
      %actionCtrl.position.x -= %actionCtrlWidth + %pad;
      %actionCtrl.extent.y = %cardRowHeight;
      %actionCtrl.position.y = %cardRowHeight/2;
      
      //%actionCtrl.setText(%defaultValue);
   }
   else if(%type $= "FilePath")
   {
      %actionCtrl = new GuiTextEditCtrl() {
         text = %defaultValue;
         horizSizing = "left";
         vertSizing = "center";
         extent = %actionExtent.x - %actionExtent.y SPC %actionExtent.y;
         position = %actionPosition;
         profile = GuiMenuTextEditProfile;
         internalName = "fileText";
      };
      
      %actionCtrl.validate = "filePathCardChanged(" @ %actionCtrl @ ");";
      
      %actionCtrlBtn = new GuiButtonCtrl() {
         text = "...";
         horizSizing = "left";
         vertSizing = "center";
         extent = %actionExtent.y SPC %actionExtent.y;
         position = %actionExtent.x - %actionExtent.y SPC %actionPosition.y;
         profile = GuiMenuTextEditProfile;
         internalName = "fileButton";
      };
      
      %actionCtrlBtn.command = "findFilePathCard(" @ %actionCtrl @ ");";
      
      %ctrl.add(%actionCtrl);
      %ctrl.add(%actionCtrlBtn);
      
      //There's some odd secondary scaling happening after the action control is getting added
      //so we'll just force the position and stuff here
      %actionCtrl.extent.x = %actionCtrlWidth * 2 - %cardRowHeight;
      %actionCtrl.position.x -= %actionCtrlWidth + %pad;
      %actionCtrl.extent.y = %cardRowHeight;
      %actionCtrl.position.y = %cardRowHeight/2;
      
      %actionCtrlBtn.extent = %cardRowHeight SPC %cardRowHeight;
      %actionCtrlBtn.position = %actionCtrl.position + %actionCtrl.extent SPC %actionCtrl.position.y;
   }
   else if(%type $= "ModuleFile")
   {
      %actionCtrl = new GuiTextEditCtrl() {
         text = %defaultValue;
         horizSizing = "left";
         vertSizing = "center";
         extent = %actionExtent.x - %actionExtent.y SPC %actionExtent.y;
         position = %actionPosition;
         profile = GuiMenuTextEditProfile;
         internalName = "fileText";
      };
      
      %actionCtrl.validate = "filePathCardChanged(" @ %actionCtrl @ ");";
      
      %actionCtrlBtn = new GuiButtonCtrl() {
         text = "...";
         horizSizing = "left";
         vertSizing = "center";
         extent = %actionExtent.y SPC %actionExtent.y;
         position = %actionExtent.x - %actionExtent.y SPC %actionPosition.y;
         profile = GuiMenuTextEditProfile;
         internalName = "fileButton";
      };
      
      %actionCtrlBtn.command = "findModuleFilePath(" @ %actionCtrl @ ");";
      
      %ctrl.add(%actionCtrl);
      %ctrl.add(%actionCtrlBtn);
      
      //There's some odd secondary scaling happening after the action control is getting added
      //so we'll just force the position and stuff here
      %actionCtrl.extent.x = %actionCtrlWidth * 2 - %cardRowHeight;
      %actionCtrl.position.x -= %actionCtrlWidth + %pad;
      %actionCtrl.extent.y = %cardRowHeight;
      %actionCtrl.position.y = %cardRowHeight/2;
      
      %actionCtrlBtn.extent = %cardRowHeight SPC %cardRowHeight;
      %actionCtrlBtn.position = %actionCtrl.position + %actionCtrl.extent SPC %actionCtrl.position.y;
   }
   else if(%type $= "Folder")
   {
      %actionCtrl = new GuiTextEditCtrl() {
         text = %defaultValue;
         horizSizing = "left";
         vertSizing = "center";
         extent = %actionExtent.x - %actionExtent.y SPC %actionExtent.y;
         position = %actionPosition;
         profile = GuiMenuTextEditProfile;
         internalName = "fileText";
      };
      
      %actionCtrl.validate = "folderPathCardChanged(" @ %actionCtrl @ ");";
      
      %actionCtrlBtn = new GuiButtonCtrl() {
         text = "...";
         horizSizing = "left";
         vertSizing = "center";
         extent = %actionExtent.y SPC %actionExtent.y;
         position = %actionExtent.x - %actionExtent.y SPC %actionPosition.y;
         profile = GuiMenuTextEditProfile;
         internalName = "fileButton";
      };
      
      %actionCtrlBtn.command = "findFolderPathCard(" @ %actionCtrl @ ");";
      
      %ctrl.add(%actionCtrl);
      %ctrl.add(%actionCtrlBtn);
      
      //There's some odd secondary scaling happening after the action control is getting added
      //so we'll just force the position and stuff here
      %actionCtrl.extent.x = %actionCtrlWidth * 2 - %cardRowHeight;
      %actionCtrl.position.x -= %actionCtrlWidth + %pad;
      %actionCtrl.extent.y = %cardRowHeight;
      %actionCtrl.position.y = %cardRowHeight/2;
      
      %actionCtrlBtn.extent = %cardRowHeight SPC %cardRowHeight;
      %actionCtrlBtn.position = %actionCtrl.position + %actionCtrl.extent SPC %actionCtrl.position.y;
   }
   else if(%type $= "Checkbox")
   {
      %actionExtent = 60 SPC %engineBuildTextHeight;
      %actionPosition = (%ctrl.extent.x - %actionExtent.x) - 5 SPC 0;
      
      %onText = "On";
      %offText = "Off";
      
      if(%data !$= "" && getTokenCount(%data, ";") == 2)
      {
          %offText = getToken(%data, ",;", 0); 
          %onText = getToken(%data,  ",;", 1);
      }
      
      %optionText = %defaultValue ? %onText : %offText;
   
      %actionCtrl = new GuiCheckboxCtrl() {
         text = %optionText;
         horizSizing = "left";
         vertSizing = "center";
         extent = %actionExtent;
         position = %actionPosition;
         profile = GuiMenuCheckboxProfile;
      };

      %actionCtrl.setStateOn(%defaultValue);
      
      %actionCtrl.command = "checkboxCardChanged(" @ %actionCtrl @ ");";
      
      %ctrl.add(%actionCtrl);
   }
   
   %insetOffset = %insetCount * 20;
   %ctrl-->btn.position.x += %insetOffset;
   %ctrl-->btn.extent.x -= %insetOffset;
   
   %ctrl-->label.position.x += %insetOffset;
   %ctrl-->label.extent.x -= %insetOffset;
   
   %actionCtrl.active = %enabled;
   
   %actionCtrl.targetVar = %variable;
   
   return %ctrl;
}

function textEditCardChanged(%ctrl)
{
   %evalCommand = %ctrl.targetVar @ " = \"" @ %ctrl.getText() @ "\";";
   eval(%evalCommand);
   
   MainMenuGui.refresh();
   if(ManagerWizardWindow.isAwake())
      ManagerWizardWindow.refreshPage();
}

function checkboxCardChanged(%ctrl)
{
   %evalCommand = %ctrl.targetVar @ " = \"" @ %ctrl.isStateOn() @ "\";";
   eval(%evalCommand);
   
   MainMenuGui.refresh();
   if(ManagerWizardWindow.isAwake())
      ManagerWizardWindow.refreshPage();
}

function dropdownCardChanged(%ctrl)
{
   %evalCommand = %ctrl.targetVar @ " = \"" @ %ctrl.getText() @ "\";";
   eval(%evalCommand);
   
   %ctrl.setText(%ctrl.getText());
   
   MainMenuGui.refresh();
   if(ManagerWizardWindow.isAwake())
      ManagerWizardWindow.refreshPage();
}

function filePathCardChanged(%ctrl)
{
   %evalCommand = %ctrl.targetVar @ " = \"" @ %ctrl.getText() @ "\";";
   eval(%evalCommand);
   
   MainMenuGui.refresh();
   if(ManagerWizardWindow.isAwake())
      ManagerWizardWindow.refreshPage();
}

function folderPathCardChanged(%ctrl)
{
   %evalCommand = %ctrl.targetVar @ " = \"" @ %ctrl.getText() @ "\";";
   eval(%evalCommand);
   
   MainMenuGui.refresh();
   if(ManagerWizardWindow.isAwake())
      ManagerWizardWindow.refreshPage();
}

function findFilePathCard(%ctrl)
{
   %filters = "All Files (*.*)|*.*|";
   %dlg = new OpenFileDialog()
   {
      Title = "Select File Path";
      Filters = %filters;
      DefaultFile = "./";
      ChangePath = false;
      MustExist = true;
      MultipleFiles = false;
   };

   %dlg.DefaultPath = "./";
   if(%dlg.Execute())
   {
      %path = fileName(%dlg.FileName);
      
      %ctrl.setText(%path);
      
      eval(%ctrl.validate);
   }

   %dlg.delete();
}

function findModuleFilePath(%ctrl)
{
   %filters = "Module Files (*.module)|*.module|";
   %dlg = new OpenFileDialog()
   {
      Title = "Select File Path";
      Filters = %filters;
      DefaultFile = "./";
      ChangePath = false;
      MustExist = true;
      MultipleFiles = false;
   };

   %dlg.DefaultPath = "./";
   if(%dlg.Execute())
   {
      %path = %dlg.FileName;
      
      %ctrl.setText(%path);
      
      eval(%ctrl.validate);
   }

   %dlg.delete();
}


function findFolderPathCard(%ctrl)
{
   %dlg = new OpenFolderDialog()
   {
      Title = "Select Folder";
      Filters = "";
      DefaultFile = "./";
      ChangePath = false;
      MustExist = true;
      MultipleFiles = false;
   };

   %dlg.DefaultPath = "./";
   if(%dlg.Execute())
   {
      %path = makeFullPath(%dlg.FileName);
      
      %ctrl.setText(%path);
      
      eval(%ctrl.validate);
   }

   %dlg.delete();
}
//==============================================================================
//
//==============================================================================
function AddActionButton(%image, %text, %command, %tooltip)
{
   %actionBtn = new GuiIconButtonCtrl()
   {
      position = "0 0";
      extent = "100 45";
      profile = GuiMenuActionBarButtonProfile;
      buttonMargin = "0 -10";
      bitmapAsset = %image;
      iconLocation = "Center";
      sizeIconToButton = true;
      makeIconSquare = true;
      textLocation = "Bottom";
      text = %text;
      command = %command;
      tooltip = %tooltip;
   };
   ActionButtonPanelList.add(%actionBtn);
   
   return %actionBtn;
}

//==============================================================================
//
//==============================================================================
function MainPanelFooter::setupButtons(%this, %okButtonLabel, %cancelButtonLabel, %okButtonCommand, %cancelButtonCommand)
{
   if(%okButtonLabel $= "" && %okButtonCommand $= "")
   {
      %this-->okButton.setHidden(true);  
   }
   else
   {
      %this-->okButton.setHidden(false);
      %this-->okButton.setText(%okButtonLabel);
      %this-->okButton.command = %okButtonCommand;  
   }
   
   if(%cancelButtonLabel $= "" && %cancelButtonCommand $= "")
   {
      %this-->cancelButton.setHidden(true);  
   }
   else
   {
      %this-->cancelButton.setHidden(false);
      %this-->cancelButton.setText(%cancelButtonLabel);
      %this-->cancelButton.command = %cancelButtonCommand;  
   }
}

function MainPanelFooter::setText(%this, %footerText, %clearTimeMS)
{
   %this-->FooterText.setText(%footerText);
   
   if(%clearTimeMS !$= "")
   {
      %this.schedule(%clearTimeMS, "clearText");  
   }
}

function MainPanelFooter::clearText(%this)
{
   %this-->FooterText.setText("");
}

function MainPanelFooter::clear(%this)
{
   %this.setupButtons();
   %this-->FooterText.setText("");
}

function MainPanelFooter::setOKButtonActive(%this, %active)
{
   %this-->okButton.setActive(%active);
}

function MainPanelFooter::setCancelButtonActive(%this, %active)
{
   %this-->cancelButton.setActive(%active);
}