function CreateNewModule()
{
   $CurrentModule = new ScriptObject();
   
   MainMenuGui.goToPage("NewModulePage");
}

function populateModuleProperties(%isNew)
{
   if(%isNew $= "")
      %isNew = false;
      
   if(%isNew)
      updateBreadcrumbList("ModulesPage;NewModulePage");
   else
      updateBreadcrumbList("ModulesPage;ModulePropertiesPage");
   
   MainMenuGui.setActionBarVisible(!%isNew);
   
   MainMenuSearchBar.hidden = true;
   MainMenuSearchClearBtn.hidden = true;
   
   MainViewStack.hidden = false;
   MainViewStack.clear();
   
   MainViewStack.add(createEditCard("Module Name", "TextEdit", "$CurrentModule.moduleName", "The name of this engine build", ""));
         
   if(%isNew)
   {
      MainViewStack.add(createEditCard("Source Location", "Dropdown", "$CurrentModule.isLocalOrGit", "Indicates if this engine build is from the local machine, or a git repo", "Git Repository;Local Path"));  
      
      if($CurrentModule.isLocalOrGit $= "Git Repository")
      {
         $CurrentModule.localPath = "";
      }
      else if($CurrentModule.isLocalOrGit $= "Local Path")
      {
         $CurrentModule.gitPath = "";
         $CurrentModule.branchName = "";
      }
      
      if($CurrentModule.isLocalOrGit $= "Git Repository")
      {
         MainViewStack.add(createEditCard("Git URL Path", "TextEdit", "$CurrentModule.gitPath", "What URL for the git repo this module is from", ""));
         MainViewStack.add(createEditCard("Git Branch", "TextEdit", "$CurrentModule.branchName", "What branch name for the git repo this module is from. Leave blank to use the repository default", ""));
      }
      else if($CurrentEngineBuild.isLocalOrGit $= "Local Path")
      {
         MainViewStack.add(createEditCard("Local Directory Path", "Folder", "$CurrentModule.localPath", "What local directory path this module is drom on the current machine", ""));
      }
   }
   else
   {
      MainViewStack.add(createEditCard("Git URL Path", "TextEdit", "$CurrentModule.gitPath", "What URL for the git repo this module is from", ""));
      MainViewStack.add(createEditCard("Git Branch", "TextEdit", "$CurrentModule.branchName", "What branch name for the git repo this module is from. Leave blank to use the repository default", ""));
      MainViewStack.add(createEditCard("Local Directory Path", "Folder", "$CurrentModule.localPath", "What local directory path this module is drom on the current machine", ""));
   }
         
   if($CurrentModule.isDefault)
   {
      for(%i=0; %i < MainViewStack.getCount(); %i++)
      {
         %child = MainViewStack.getObject(%i);
         
         //we'll skip local directory path stuff as we need to be able to change the local install
         //even on default builds
         if(%child-->label.text !$= "Local Directory Path")
         {
            %child.callOnChildren("setActive", false);
         }
      }
   }
         
   if(%isNew)
   {
      %buttons = createOKCancelCard("Create", "Cancel", "saveNewModule();", "MainMenuGUI.goToPage(\"ModulesPage\");");
   
      %valid = true;
      
      if($CurrentModule.moduleName $= "")
         %valid = false;
         
      if($CurrentModule.isLocalOrGit $= "")
         %valid = false;
      
      if($CurrentModule.isLocalOrGit $= "Git Repository" && $CurrentModule.gitPath $= "")
         %valid = false;
         
      if($CurrentModule.isLocalOrGit $= "Git Repository" && $CurrentModule.gitPath !$= "")
      {
         %valid = false;
      }
      
      if($CurrentModule.isLocalOrGit $= "Local Path" && $CurrentModule.localPath $= "")
         %valid = false;
      
      if(%valid)
         %buttons-->okButton.setActive(true);
      else
         %buttons-->okButton.setActive(false);
      
      MainViewStack.add(%buttons);  
   }
   else
   {
      %buttons = createOKCancelCard("Save", "Cancel", "saveModule($CurrentModule);", "");
      MainViewStack.add(%buttons); 
   }
   
   //
   //Now add our action panel buttons
   ActionButtonPanelList.clear();
   
   AddActionButton("ManagerUI:trashcan_image", "Delete Module", "", "");
   AddActionButton("ManagerUI:trashcan_image", "Remove From List", "", "");
   
   /*if($CurrentEngineBuild.localPath !$= "")
   {
      AddActionButton("ManagerUI:plus_image", "New Project", "$ResetForm=true;$NewProjectTargetEngineBuild=$CurrentEngineBuild;MainMenuGui.gotoPage(\"NewProjectPage\");", "");
      
      if($CurrentEngineBuild.gitPath !$= "")
         AddActionButton("ManagerUI:download_image", "Pull Updates", "pullUpdateEngineBuild($CurrentEngineBuild);", "");
         
      AddActionButton("ManagerUI:trashcan_image", "Delete Local Copy", "", "");
   }
   else
      AddActionButton("ManagerUI:download_image", "Download", "downloadEngineBuild($CurrentEngineBuild);", "");
   
   if(!$CurrentEngineBuild.isDefault)
      AddActionButton("ManagerUI:trashcan_image", "Remove From List", "", "");
   
   if($CurrentEngineBuild.gitPath !$= "")
   {
      AddActionButton("ManagerUI:share1_image", "Visit Repo Page", "openEngineBuildGitPage($CurrentEngineBuild);", 
               "Visit the repository page of this engine build.");
               
      AddActionButton("ManagerUI:share1_image", "Visit Issues Page", "openEngineBuildIssuesPage($CurrentEngineBuild);", 
            "Visit the issues page of this engine build.");
   }*/
}

function saveCurrentProject()
{
   if(!isObject($CurrentProject))
      return;
      
   saveEngineBuild($CurrentProject);
}

function saveNewProject()
{
   if(!isObject($CurrentProject))
      return;
   
   incrementProjectCount();
   
   %newProjectId = getProjectCount();
   
   $CurrentProject.projectId = %newProjectId;
   
   generateNewProject();
}

function generateNewProject()
{
   %engineBuildId = findEngineBuildByName($CurrentProject.targetBuildName);
   $CurrentProject.engineBuildId = %engineBuildId;
   %engineBuild = getEngineBuild(%engineBuildId);
   %engineBuildPath = %engineBuild.localPath;
   %newProjectPath = $CurrentProject.localPath;
   
   %fullProjectPath = %newProjectPath @ "/";
   
   //sanitize the paths to be sure
   %engineBuildPath = strReplace(%engineBuildPath, "//", "/");
   %fullProjectPath = strReplace(%fullProjectPath, "//", "/");
   
   if(!IsDirectory(%fullProjectPath))
   {
      createPath(%fullProjectPath);
   }

   if(!%engineBuild.isBinary)
   {
      %buildPath = %fullProjectPath @ "Build/"; 
      if(!IsDirectory(%buildPath))
      {
         createPath(%buildPath);
      } 
      
      $CurrentProject.buildPath = %buildPath;
      
      if(!copyProjectFolder(%engineBuildPath, %fullProjectPath))
      {
         MessageBoxOK("Failed.", "Failed to copy the Engine Build to the new project path. Please try again.");  
         return;
      }
   
      //Install modules
      /*%moduleCount = getModuleCount();
      for(%m=0; %m < %moduleCount; %m++)
      {
         %doInstall = getVariable("$TorqueManager::installModule[" @ %m @ "]");
         if(%doInstall)
         {
            %moduleName = getModuleNameByIndex(%m);
            %localPath = getModuleLocalPathByIndex(%m);
            %moduleInstallPath = %fullProjectPath @ "/My Projects/" @ %projName @ "/game/data/" @ %moduleName @ "/";
            if(!IsDirectory(%moduleInstallPath))
            {
               createPath(%moduleInstallPath);  
            }
            
            if(!copyProjectFolder(%localPath, %moduleInstallPath))
            {
               error("Failed to install module " @ %moduleName @ " from path: " @ %localPath @ " to new project: " @ %projName);
            }
         }
      }*/
      
      //run cmake
      if(isDirectory("core/libs/cmake/bin"))
      {
         %commandString = "cd \"" @ makeFullPath(getMainDotCsDir()) @ "/core/libs/cmake/bin/\"";
         %commandString = %commandString @ " && cmake.exe ";
      }
      else
      {
         %commandString = "cmake ";
      }
      %commandString = %commandString @ "-S \"" @ %fullProjectPath @ "\" ";
      %commandString = %commandString @ "-B \"" @ %buildPath @ "\" ";
      %commandString = %commandString @ "-G \"" @ $CurrentProject.generatorName @ "\" ";
      %commandString = %commandString @ "-DTORQUE_APP_NAME:STRING=" @ $CurrentProject.projectName @ " -DCMAKE_GENERATOR_PLATFORM=x64";

      systemCommand(%commandString, "makeProjectComplete");  
   }
   else
   {
      if(!copyProjectFolder(%engineBuildPath, %fullProjectPath))
      {
         MessageBoxOK("Failed.", "Failed to copy the Engine Build to the new project path. Please try again.");  
         return;
      }
      
      //Do the rename on the exe, torsion, etc files to comply them to the new project name  
      %appPath = findFirstFile( %fullProjectPath @ "/*.exe", false);
      if(%appPath !$= "")
      {
         %binaryName = fileBase(%appPath);
         
         %newAppPath = strReplace(%appPath, %binaryName, $CurrentProject.projectName);
         pathCopy(%appPath, %newAppPath);
         fileDelete(%appPath);
      }
      
      %appPath = findFirstFile( %fullProjectPath @ "/*.torsion", false);
      if(%appPath !$= "")
      {
         %binaryName = fileBase(%appPath);
         
         %newAppPath = strReplace(%appPath, %binaryName, $CurrentProject.projectName);
         pathCopy(%appPath, %newAppPath);
         fileDelete(%appPath);
      }
      
      //Install modules
      /*%moduleCount = getModuleCount();
      for(%m=0; %m < %moduleCount; %m++)
      {
         %doInstall = getVariable("$TorqueManager::installModule[" @ %m @ "]");
         if(%doInstall)
         {
            %moduleName = getModuleNameByIndex(%m);
            %localPath = getModuleLocalPathByIndex(%m);
            %moduleInstallPath = %fullProjectPath @ "/data/" @ %moduleName @ "/";
            if(!IsDirectory(%moduleInstallPath))
            {
               createPath(%moduleInstallPath);  
            }
            
            if(!copyProjectFolder(%localPath, %moduleInstallPath))
            {
               error("Failed to install module " @ %moduleName @ " from path: " @ %localPath @ " to new project: " @ %projName);
            }
         }
      }*/
      
      makeProjectComplete();
   }   
}

function makeProjectComplete(%resultCode)
{
   saveProject($CurrentProject);
   
   openSolutionFile(%resultCode);
   
   //Hop over to the projects page so we can check out our new project
   MainMenuGui.goToPage("ProjectsPage");
}

function getUsableEngineBuildsList()
{
   %buildCount = getEngineBuildCount();
   
   %buildList = "";
   for(%i=1; %i <= %buildCount; %i++)
   {
      %bld = getEngineBuild(%i);
      
      %buildName = %bld.buildName;
      
      if(%bld.localPath $= "")
         continue;

      if(%buildList $= "")
         %buildList = %buildName;
      else
         %buildList = %buildList @ ";" @ %buildName; 
   }
   
   if(%buildList $= "")
      %buildList = "No Valid Engine Builds";
      
   return %buildList;
}

function getCompilerList()
{
   %compilerList = "";
   if($platform $= "windows")
   {
      %compilerList = "Visual Studio 17 2022;Visual Studio 16 2019"; 
   }  
   else if($platform $= "macOS")
   {
      %compilerList = "XCode";
   } 

   if(%compilerList $= "")
      %compilerList = "Unix Makefile";
   else 
      %compilerList = %compilerList @ ";Unix Makefile";
   
   return %compilerList;
}