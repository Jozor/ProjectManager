function downloadModule(%module)
{
   if(hasMissingModuleDependencies())
   {
      MessageBoxOKCancel("Download?", "This module depends on other modules you have not downloaded. Download them as well?", "", "");
   }
   displayLoadingSplashGui();
   
   $downloadingModuleIdx = %module.moduleId;
   
   %gitPath = %module.gitPath;
   %branchName = %module.branchName;
   %moduleName = %module.moduleName;
   
   %downloadPath = getModuleDownloadPath();
   
   //sanitize
   %moduleName = strReplace(%moduleName, "(", "");
   %moduleName = strReplace(%moduleName, ")", "");
   %moduleName = trim(%moduleName);
   %moduleName = strReplace(%moduleName, ".", "");
   %moduleName = strReplace(%moduleName, " ", "_");
   
   %moduleName = %module.moduleId @ "_" @ %moduleName;
   
   %targetPath = %downloadPath @ "/" @ %moduleName @ "/";
   
   %targetPath = strReplace(%targetPath, "//", "/");
   
   if(!IsDirectory(%targetPath))
   {
      createPath(%targetPath);  
   }
   
   $downloadingModuleTargetPath = %targetPath;
   
   %commandString = "git clone ";  
   
   if(%branchName !$= "")
      %commandString = %commandString @ "--branch " @ %moduleName @ " ";
      
   %commandString = %commandString @ %gitPath @ " \"" @ %targetPath @ "\"";
   
   systemCommand(%commandString, "downloadModuleComplete");
}

function downloadModuleComplete(%resultCode)
{
   error("Running downloadModule resulted in a return code of " @ %resultCode);
   
   if(%resultCode $= 0)
   {
      $CurrentModule.localPath = $downloadingModuleTargetPath;
      
      saveModule($CurrentModule);
      
      MainMenuGui.refresh();
   }
   
   hideLoadingSplashGui();
}

function pullUpdateModule(%module)
{
   $downloadingModuleIdx = %module.moduleId;
   
   %gitPath = %module.gitPath;
   %branchName = %module.branchName;
   %moduleName = %module.moduleName;
   
   %downloadPath = getModuleDownloadPath();
   
   %commandString = "cd \"" @ filePath(makeFullPath(%module.localPath)) @ "\" && git pull"; 
   
   systemCommand(%commandString, "pullUpdateModuleComplete");
}

function pullUpdateModuleComplete(%resultCode)
{
   error("Running downloadModule resulted in a return code of " @ %resultCode);
   
   if(%resultCode $= 0)
   {
      MainMenuGui.refresh();
   }
}

function openModuleGitPage(%buildIdx)
{
   %gitPath = getModuleGitPathByIndex(%buildIdx);
   
   gotoWebPage(%gitPath);
}

function openModuleIssuesPage(%buildIdx)
{
   %gitPath = getModuleGitPathByIndex(%buildIdx);
   
   gotoWebPage(%gitPath @ "/issues");
}

//
function openModuleActionMenu(%buildIdx, %buttonCtrl)
{
   openActionMenu(%buttonCtrl);
   
   ActionMenuDropdown.targetId = %buildIdx;
   
   %gitPath = getModuleGitPathByIndex(%buildIdx);
   %localPath = getModuleLocalPathByIndex(%buildIdx);
   if(%gitPath !$= "")
   {
      if(%localPath !$= "" && IsDirectory(%localPath))
      {
         addActionMenuEntry("ManagerUI:download_image", "Pull Updates", "pullUpdateModule(" @ %buildIdx @ ");", 
            "Pulls any updates for this module from its git repository.");
      }
      else
      {
         addActionMenuEntry("ManagerUI:download_image", "Download Build", "downloadModule(" @ %buildIdx @ ");", 
            "Downloads module to local machine.");
      }
      
      addActionMenuEntry("ManagerUI:share1_image", "Visit Repository Page", "openModuleGitPage(" @ %buildIdx @ ");", 
            "Visit the repository page of this module.");
            
      addActionMenuEntry("ManagerUI:share1_image", "Visit Issues Page", "openModuleIssuesPage(" @ %buildIdx @ ");", 
            "Visit the issues page of this module.");
   }
     
   %isDefault = isModuleDefault(%buildIdx);
   if(!%isDefault || (%localPath !$= "" && IsDirectory(%localPath)))
   {
      addActionMenuEntry("ManagerUI:textField_image", "Edit Properties", 
         "populateModuleProperties(" @ %buildIdx @ ");", 
         "Edit the module's properties");  
         
      /*%gitPath = getModuleGitPathByIndex(%buildIdx);
      if(%gitPath !$= "")
         addActionMenuEntry("ManagerUI:cloud_image", "Change Git Info", "openModuleChangeGitInfoWizard();", 
            "Edits the git path and branch of this build."); */
   }
      
   if(%localPath !$= "")
   {
      addActionMenuEntry("ManagerUI:trashcan_image", "Delete Build", "deleteModule(" @ %buildIdx @ ");", 
         "Deletes this module from the local machine.");
   }
   
   if(!%isDefault)
   {
      addActionMenuEntry("ManagerUI:trashcan_image", "Remove Build", "removeModuleFromListing(" @ %buildIdx @ ");", 
         "Removes module from list. If downloaded, local copy will stay on machine.");
   }
}

//
function deleteModule(%module)
{
   $CurrentModule = %module;
   %moduleName = $CurrentModule.moduleName;
   %localPath = $CurrentModule.localPath;
   
   MessageBoxOKCancel("Delete Module?", 
      "Are you sure you wish to delete the '" @ %moduleName @"' Module?\nFile path: " @ %localPath,
      "doDeleteModule();", "");
}

function doDeleteModule()
{
   displayLoadingSplashGui();
   
   //do da delete.
   %localPath = $CurrentModule.localPath;
   
   if(isDirectory(%localPath))
   {
      if(!MainMenuGui.deleteFolder(%localPath))
      {
         MessageBoxOK("Failure", "Failed to successfully delete local copy of selected Module.");
         hideLoadingSplashGui();
         return;
      }
   }
   
   setModuleLocalPath($CurrentModule, "");
   
   //check if it was a build that had a gitpath
   //if not, then we'll just fully remove the registration as well, as it's completely gone
   %gitPath = $CurrentModule.gitPath;
   if(%gitPath $= "")
   {
      doRemoveModuleFromListing();
   }
   
   MainMenuGui.refresh();
   
   hideLoadingSplashGui();
}

function removeModuleFromListing(%module)
{
   $CurrentModule = %module;
   
   %moduleName = $CurrentModule.moduleName;
   MessageBoxOKCancel("Remove Module?", 
      "Are you sure you wish to remove the '" @ %moduleName @"' Module from the Manager?\nIf there is a local copy on this machine it will not be deleted.",
      "doRemoveModuleFromListing();", "");
}

function doRemoveModuleFromListing()
{
   displayLoadingSplashGui();
   
   if(!$CurrentModule.isDefault)
      removeModule($CurrentModule);
   
   MainMenuGui.refresh();
   
   hideLoadingSplashGui();
}

function changeModuleDownloadPath()
{
   %dlg = new OpenFolderDialog()
   {
      Title = "Select Module Download Folder";
      Filters = "";
      DefaultFile = "./";
      ChangePath = false;
      MustExist = true;
      MultipleFiles = false;
   };

   %dlg.DefaultPath = "./";
   if(%dlg.Execute())
   {
      %path = makeFullPath(%dlg.FileName);

      $TorqueManager::moduleDLPath = %path;
      
      if(startsWith(%path, getMainDotCsDir()))
      {
         %path = strreplace(%path, getMainDotCsDir(), "{ManagerDir}");  
      }
      
      EditorSettings.setValue("Settings/Modules/downloadPath", %path);
      
      saveData();
      MainMenuGui.refresh();
   }

   %dlg.delete();
}

function findModulePath(%buildIdx)
{
   %dlg = new OpenFolderDialog()
   {
      Title = "Select Module File";
      Filters = "Module Files (*.module)|*.module|";
      ChangePath = false;
      MustExist = true;
      MultipleFiles = false;
   };

   %dlg.DefaultPath = "./";
   if(%dlg.Execute())
   {
      %path = makeFullPath(%dlg.FileName);
      
      setModuleLocalPathByIndex(%buildIdx, %path);

      saveData();
      MainMenuGui.refresh();
   }

   %dlg.delete();
}
//==============================================================================
// Properties
//==============================================================================
/*function populateModuleProperties(%moduleId)
{
   Canvas.pushDialog(ManagerPropertiesGUI);
   ManagerPropertiesList.clear();
   
   ManagerPropertiesGUI.targetId = %moduleId;
   ManagerPropertiesGUI.mode = "Module";
   
   %isDefault = isModuleDefault(%moduleId);
   
   if(!%isDefault)
   {
      %moduleName = getModuleNameByIndex(%moduleId);
      $tmpModuleName = %moduleName;
      
      %field = makeSettingsCard("Module Name", "$tmpModuleName", "button", %moduleName, %moduleName, "Change Module Name", 
         "changeModuleName("@%moduleId@");");
      ManagerPropertiesList.add(%field);
      
      %gitPath = getModuleGitPathByIndex(%moduleId);
      $tmpModuleGitPath = %gitPath;
      if(%gitPath !$= "")
      {
         %field = makeSettingsCard("Git URL Path", "$tmpModuleGitPath", "button", %gitPath, %gitPath, "Change Module Git Path",
            "changeModuleGitURLPath("@%moduleId@");");
         ManagerPropertiesList.add(%field);

         %branchName = getModuleBranchNameByIndex(%moduleId);
         $tmpModuleBranchName = %branchName;
         if(%branchName $= "")
            %branchName = "(Default Branch)";
                  
         %field = makeSettingsCard("Git Branch Name", "$tmpModuleBranchName", "button", %branchName, %branchName, "Change Module Git Branch Name", 
            "changeModuleBranchName("@%moduleId@");");
         ManagerPropertiesList.add(%field);
      }
   }
   
   %localPath = getModuleLocalPathByIndex(%moduleId);
   if(%localPath !$= "" && IsDirectory(%localPath))
   {
      %installStatus = getModuleInstallInNewProj(%moduleId);
      $tmpModuleInstallInProj = %installStatus;
      
      %field = makeSettingsCard("Install in New Projects", "$tmpModuleInstallInProj", "bool", %installStatus, "", "Dictates if this module should be marked to always install when setting up a new project.", 
         "changeModuleInstallStatus("@%moduleId@");");
      ManagerPropertiesList.add(%field);  
   }
   
   /*%localPath = getEngineBuildLocalPathByIndex(%buildIdx);
   if(%localPath !$= "")
   {
      managerPropertiesInspector.addField("$tmpEngineBuildLocalPath", "Local Folder Path", "string", "Directory Path to the locally downloaded copy of this build.", 
               %localPath, "", "");
   }*/
//}

function changeModuleName(%buildIdx)
{
   $renamingModuleIdx = %buildIdx;
   showRenameWindow("Change Module Name", "doModuleNameChange");
}

function doModuleNameChange(%newName)
{
   setModuleNameByIndex($renamingModuleIdx, %newName);
   
   saveData();
   populateModuleProperties($renamingModuleIdx);
   MainMenuGui.refresh();
}

function changeModuleGitURLPath(%buildIdx)
{
   $renamingModuleIdx = %buildIdx;
   showRenameWindow("Change Module Git URL", "doModuleGitURLPathChange");
}

function doModuleGitURLPathChange(%newURL)
{
   setModuleGitPathByIndex($renamingModuleIdx, %newURL);
   
   saveData();
   populateModuleProperties($renamingModuleIdx);
}

function changeModuleBranchName(%buildIdx)
{
   $renamingModuleIdx = %buildIdx;
   showRenameWindow("Change Module Branch Name", "doModuleBranchChange", true);
}

function doModuleBranchChange(%newName)
{
   setModuleBranchNameByIndex($renamingModuleIdx, %newName);
   
   saveData();
   populateModuleProperties($renamingModuleIdx);
}

function changeModuleInstallStatus(%buildIdx)
{
   setModuleInstallInNewProj(%buildIdx, $tmpModuleInstallInProj);
   
   saveData();
   populateModuleProperties(%buildIdx);
   MainMenuGui.refresh();
}

function hasMissingModuleDependencies()
{
   %missing = false;
   if($CurrentModule.dependencies !$= "")
   {
      %depCount = getTokenCount($CurrentModule.dependencies, ",;");
      for(%i=0; %i < %depCount; %i++)
      {
         %depName = getToken($CurrentModule.dependencies, ",;", %i);
         %depModuleId = findModuleByName(%depName);
         if(%depModuleId != 0)
         {
            %depModule = getModule(%depModuleId);
            if(%depModule.localPath $= "")
            {
               %missing = true;
               break;  
            }
         }
      }
   }  
   
   return %missing;
}
//==============================================================================
// Wizard Stuff
//==============================================================================
//==============================================================================
// New Module
//==============================================================================
function openNewModuleWizard()
{
   setupWizard();
   
   ManagerWizardWindow.text = "Register New Module";
   
   ManagerWizardWindow.addWizardPage(AddNewModulePage0);
   ManagerWizardWindow.addWizardPage(AddNewModulePage1);
   ManagerWizardWindow.addWizardPage(AddNewModulePage2);
   
   ManagerWizardWindow.setStep(0); 
   
   ManagerWizardWindow.hidden = false;  
   ManagerWizardWindow.selectWindow();
}

function AddNewModulePage0::openPage(%this)
{
   ModuleGitBtn.setStateOn(false);
   ModuleLocalBtn.setStateOn(false);
   
   AddNewModulePage0-->gitPathURL.text = "";
   AddNewModulePage0-->gitBranchName.text = "";
}

function ModuleGitBtn::onClick(%this)
{
   AddNewModulePage0-->gitPathTxt.setActive(true);
   AddNewModulePage0-->gitPathURL.setActive(true);
   AddNewModulePage0-->gitBranchNameTxt.setActive(true);
   AddNewModulePage0-->gitBranchName.setActive(true);
   
   AddNewModulePage0-->localPathTxt.setActive(false);
   AddNewModulePage0-->localPathBtn.setActive(false);
}

function ModuleLocalBtn::onClick(%this)
{
   AddNewModulePage0-->gitPathTxt.setActive(false);
   AddNewModulePage0-->gitPathURL.setActive(false);
   AddNewModulePage0-->gitBranchNameTxt.setActive(false);
   AddNewModulePage0-->gitBranchName.setActive(false);
   
   AddNewModulePage0-->localPathTxt.setActive(true);
   AddNewModulePage0-->localPathBtn.setActive(true);
}

function newModuleLocalPathBtn::onClick(%this)
{
   //open file path bit
   %dlg = new OpenFolderDialog()
   {
      Title = "Select Module Folder";
      Filters = "";
      DefaultFile = "./";
      ChangePath = false;
      MustExist = true;
      MultipleFiles = false;
   };

   %dlg.DefaultPath = "./";
   if(%dlg.Execute())
   {
      %path = makeFullPath(%dlg.FileName);
      AddNewModulePage0-->localPath.setText(%path);
      $TorqueManager::newModuleLocalPath = %path;
   }

   %dlg.delete();
}

function AddNewModulePage1::openPage(%this)
{
   //If they didn't pass validation on the previous page, go back to it
   if(!ModuleGitBtn.isStateOn() && !ModuleLocalBtn.isStateOn())
      ManagerWizardWindow.setStep(0);
      
   AddNewModulePage1-->ModuleNameTxt.text = "";
   AddNewModulePage1-->installCheckbox.setStateOn(false);
      
   $TorqueManager::newModuleIsGit = false;
   $TorqueManager::newModuleIsLocal = false;
      
   if(ModuleGitBtn.isStateOn())
   {
      $TorqueManager::newModuleIsGit = true;
      $TorqueManager::newModuleGitPath = AddNewModulePage0-->gitPathURL.getText();
      $TorqueManager::newModuleBranchName = AddNewModulePage0-->gitBranchName.getText();
   }
   else if(ModuleLocalBtn.isStateOn())
   {
      $TorqueManager::newModuleIsLocal = true;
   }
}

function AddNewModulePage2::openPage(%this)
{
   //If they didn't pass validation on the previous page, go back to it
   if(AddNewModulePage1-->ModuleNameTxt.getText() $= "")
      ManagerWizardWindow.setStep(1);
      
   %this-->ModuleMakeComplete.setHidden(true);
   ManagerWizardWindow-->nextButton.setActive(false);
   
   Canvas.repaint();
   
   //start the ruuuuun
   if($TorqueManager::newModuleIsGit)
   {
      %buildCount = getModuleCount();
      
      PMSettings.setValue("Modules/" @ %buildCount @ "/gitPath", $TorqueManager::newModuleGitPath);
      PMSettings.setValue("Modules/" @ %buildCount @ "/moduleName", AddNewModulePage1-->ModuleNameTxt.getText());
      PMSettings.setValue("Modules/" @ %buildCount @ "/branchName", $TorqueManager::newModuleBranchName);
      PMSettings.setValue("Modules/" @ %buildCount @ "/localPath", "");
      PMSettings.setValue("Modules/" @ %buildCount @ "/isDefault", "0");
      PMSettings.setValue("Modules/" @ %buildCount @ "/installInNewProj", AddNewModulePage1-->installCheckbox.isStateOn());
   }
   else if($TorqueManager::newModuleIsLocal)
   {
      %buildCount = getModuleCount();
      
      PMSettings.setValue("Modules/" @ %buildCount @ "/gitPath", "");
      PMSettings.setValue("Modules/" @ %buildCount @ "/moduleName", AddNewModulePage1-->ModuleNameTxt.getText());
      PMSettings.setValue("Modules/" @ %buildCount @ "/branchName", "");
      PMSettings.setValue("Modules/" @ %buildCount @ "/localPath", $TorqueManager::newModuleLocalPath);
      PMSettings.setValue("Modules/" @ %buildCount @ "/isDefault", "0");
      PMSettings.setValue("Modules/" @ %buildCount @ "/installInNewProj", "0");
   }
   
   saveData();
   
   MainMenuGui.refresh();
   
   %this-->ModuleMakeComplete.setHidden(false);
   ManagerWizardWindow-->nextButton.setActive(true);
}

//==============================================================================
// Change Module Git Info
//==============================================================================
function openModuleChangeGitInfoWizard()
{
   setupWizard();
   
   ManagerWizardWindow.text = "Change Engine Build Git Info";
   ManagerWizardWindow.addWizardPage(changeModuleGitInfoPage0);
   ManagerWizardWindow.addWizardPage(changeModuleGitInfoPage1);
   
   ManagerWizardWindow.setStep(0); 
   
   ManagerWizardWindow.hidden = false;  
   ManagerWizardWindow.selectWindow();
}

function changeModuleGitInfoPage0::openPage(%this)
{
   %oldGitPath = getModuleGitPathByIndex(ActionMenuDropdown.targetId);
   %this-->gitPathURL.text = %oldGitPath;
   
   %oldGitBranch = getModuleBranchNameByIndex(ActionMenuDropdown.targetId);
   %this-->gitBranchName.text = %oldGitBranch;
}

function changeModuleGitInfoPage1::openPage(%this)
{
   //If they didn't pass validation on the previous page, go back to it
   if(changeModuleGitInfoPage0-->gitPathURL.getText() $= "")
      ManagerWizardWindow.setStep(0);
      
   %this-->updateCompleteTxt.setHidden(true);
   ManagerWizardWindow-->nextButton.setActive(false);
   
   Canvas.repaint();
      
   %buildCount = getModuleCount();
   
   if(ActionMenuDropdown.targetId < 0 || %buildCount <= ActionMenuDropdown.targetId)
   {
      %this-->updateCompleteTxt.text = "Something went wrong. Invalid Engine Build Id. Please try again.";
      %this-->updateCompleteTxt.setHidden(false);
      return; //not a good index
   }
      
   PMSettings.setValue("Modules/" @ ActionMenuDropdown.targetId @ "/gitPath", AddNewModulePage0-->gitPathURL.getText());
   PMSettings.setValue("Modules/" @ ActionMenuDropdown.targetId @ "/branchName", AddNewModulePage0-->gitBranchName.getText());
   
   %this-->updateCompleteTxt.text = "Complete!";
   %this-->updateCompleteTxt.setHidden(false);
}

//==============================================================================
// Install Module
//==============================================================================
function openInstallModuleWizard(%moduleId)
{
   $TorqueManager::toInstallModuleId = %moduleId;
   
   setupWizard();
   
   ManagerWizardWindow.text = "Install Module in Project";
   
   ManagerWizardWindow.addWizardPage(InstallModulePage0);
   ManagerWizardWindow.addWizardPage(InstallModulePage1);
   
   ManagerWizardWindow.setStep(0); 
   
   ManagerWizardWindow.hidden = false;  
   ManagerWizardWindow.selectWindow();
}

function InstallModulePage0::openPage(%this)
{
   %this-->projectList.clear();
   
   %count = getProjectCount();
   for(%i=0; %i < %count; %i++)
   {
      %name = getProjectNameByIndex(%i);

      %this-->projectList.add(%name, %i); 
   }
}

function InstallModulePage1::openPage(%this)
{
   if(InstallModulePage0-->projectList.getText() $= "")
   {
       ManagerWizardWindow.previousStep();
       return;
   }
      
   %this-->installModuleCompleteTxt.setHidden(true);
   ManagerWizardWindow-->nextButton.setActive(false);  
   Canvas.repaint();
   
   %projectId = InstallModulePage0-->projectList.getSelected();
   
   %moduleName = getModuleNameByIndex($TorqueManager::toInstallModuleId);
   %localModulePath = makeFullPath(getModuleLocalPathByIndex($TorqueManager::toInstallModuleId));
   
   %projectName = getProjectNameByIndex(%projectId);
   %projectLocalPath = makeFullPath(getProjectLocalPathByIndex(%projectId));
   %projectBuildId = getProjectBuildIdByIndex(%projectId);
   
   %moduleInstallPath = "";
   if(!isEngineBuildBinary(%projectBuildId))
   {
      %moduleInstallPath = %projectLocalPath @ "/My Projects/" @ %projectName @ "/game/data/" @ %moduleName @ "/";
   }
   else
   {
      %moduleInstallPath = %projectLocalPath @ "/data/" @ %moduleName @ "/";
   }
   
   if(!IsDirectory(%moduleInstallPath))
   {
      createPath(%moduleInstallPath);  
   }
   
   if(!copyProjectFolder(%localModulePath, %moduleInstallPath))
   {
      error("Failed to install module " @ %moduleName @ " from path: " @ %localModulePath @ " to new project: " @ %projectName);
   }

   %this-->installModuleCompleteTxt.setHidden(false);
   ManagerWizardWindow-->nextButton.setActive(true); 
}