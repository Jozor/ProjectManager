function downloadModule(%module)
{
   $downloadModuleDependencies = false;
   
   if(hasMissingModuleDependencies())
   {
      MessageBoxYesNo("Download?", %module.moduleName @ " depends on other modules you have not downloaded. Download them as well?", "$downloadModuleDependencies = true; queueModuleDownload("@%module@");", "queueModuleDownload("@%module@");");
   }
   else
   {
      queueModuleDownload(%module);  
   }
}

function doModuleDownloads()
{
   if(DownloadQueue.count() == 0)
      return;
      
   %module = DownloadQueue.getkey(0);
   
   $downloadingModuleIdx = %module.moduleId;
   
   %gitPath = %module.gitPath;
   %branchName = %module.branchName;
   %moduleName = %module.moduleName;
   
   %downloadPath = getModuleDownloadPath();
   
   //sanitize
   %moduleName = strReplace(%moduleName, "(", "");
   %moduleName = strReplace(%moduleName, ")", "");
   %moduleName = trim(%moduleName);
   %moduleName = strReplace(%moduleName, ".", "");
   %moduleName = strReplace(%moduleName, " ", "_");
   
   %moduleName = %module.moduleId @ "_" @ %moduleName;
   
   if(%module.localPath !$= "" && isDirectory(%module.localPath) && !isModuleDownloaded(%module))
   {
      //if we've been given a good target folder, use that
      %targetPath = makeFullPath(%module.localPath);
   }
   else
   {
      //otherwise use default path
      %targetPath = %downloadPath @ "/" @ %moduleName @ "/";
      
      %targetPath = strReplace(%targetPath, "//", "/");
      
      if(!IsDirectory(%targetPath))
      {
         createPath(%targetPath);  
      }
   }
   
   $downloadingModuleTargetPath = %targetPath;
   
   %commandString = "git clone ";  
   
   if(%branchName !$= "")
      %commandString = %commandString @ "--branch " @ %moduleName @ " ";
      
   %commandString = %commandString @ %gitPath @ " \"" @ %targetPath @ "\"";
   
   echo("Beginning download of module " @ %moduleName);
   
   systemCommand(%commandString, "downloadModuleComplete");
}

function downloadModuleComplete(%resultCode)
{
   %module = DownloadQueue.getkey(0);
   
   error("Running downloadModule resulted in a return code of " @ %resultCode);
   
   if(%resultCode $= 0)
   {
      %module.localPath = $downloadingModuleTargetPath;
      
      saveModule(%module);
   }
   else
   {
      MessageBoxOK("Error", "Something went wrong when cloning " @ %module.moduleName @ " listed repo. Error code: " @ %resultCode);
   }
   
   DownloadQueue.pop_front();
   
   //we're at the end, so push the refresh now
   if(DownloadQueue.count() == 0)
   {
      MainMenuGui.refresh();
      hideLoadingSplashGui();
   }
   else
   {
      schedule(32, 0, doModuleDownloads);
   }
}

function queueModuleDownload(%module)
{
   //don't queue for DL if it's already installed
   if(!isModuleDownloaded(%module))
      DownloadQueue.add(%module);
   
   if($downloadModuleDependencies)
   {
      queueModuleDependenciesDownload(%module);
   }
   
   schedule(32, 0, doModuleDownloads);
   displayLoadingSplashGui();
}

function queueModuleDependenciesDownload(%module)
{
   if(%module.dependencies !$= "")
   {
      %depCount = getTokenCount(%module.dependencies, ",;");
      for(%i=0; %i < %depCount; %i++)
      {
         %depName = getToken(%module.dependencies, ",;", %i);
         %depModuleId = findModuleByName(%depName);
         if(%depModuleId != 0)
         {
            %depModule = getModule(%depModuleId);
            if(!isModuleDownloaded(%depModule))
            {
               DownloadQueue.add(%depModule);
               
               queueModuleDependenciesDownload(%depModule);
            }
         }
      }
   }  
}
//
function pullUpdateModule(%module)
{
   $downloadingModuleIdx = %module.moduleId;
   
   %gitPath = %module.gitPath;
   %branchName = %module.branchName;
   %moduleName = %module.moduleName;

   %localPath = makeFullPath(%module.localPath);
   
   //Just in case we're pointing to the *.module file directly, we'll wanna get
   //just the file path
   if(isFile(%localPath))
      %localPath = filePath(%localPath);
      
   %commandString = "cd \"" @ %localPath @ "\" && git pull"; 
   
   systemCommand(%commandString, "pullUpdateModuleComplete");
}

function pullUpdateModuleComplete(%resultCode)
{
   error("Running downloadModule resulted in a return code of " @ %resultCode);
   
   if(%resultCode $= 0)
   {
      MainMenuGui.refresh();
   }
   else
   {
      MessageBoxOK("Error", "Something went wrong when pulling updates for " @ $CurrentModule.moduleName @ " listed repo. Error code: " @ %resultCode);
   }
}

function openModuleGitPage(%buildIdx)
{
   %gitPath = getModuleGitPathByIndex(%buildIdx);
   
   gotoWebPage(%gitPath);
}

function openModuleIssuesPage(%buildIdx)
{
   %gitPath = getModuleGitPathByIndex(%buildIdx);
   
   gotoWebPage(%gitPath @ "/issues");
}

//
function openModuleActionMenu(%buildIdx, %buttonCtrl)
{
   openActionMenu(%buttonCtrl);
   
   ActionMenuDropdown.targetId = %buildIdx;
   
   %gitPath = getModuleGitPathByIndex(%buildIdx);
   %localPath = getModuleLocalPathByIndex(%buildIdx);
   if(%gitPath !$= "")
   {
      if(%localPath !$= "" && IsDirectory(%localPath))
      {
         addActionMenuEntry("ManagerUI:download_image", "Pull Updates", "pullUpdateModule(" @ %buildIdx @ ");", 
            "Pulls any updates for this module from its git repository.");
      }
      else
      {
         addActionMenuEntry("ManagerUI:download_image", "Download Build", "downloadModule(" @ %buildIdx @ ");", 
            "Downloads module to local machine.");
      }
      
      addActionMenuEntry("ManagerUI:share1_image", "Visit Repository Page", "openModuleGitPage(" @ %buildIdx @ ");", 
            "Visit the repository page of this module.");
            
      addActionMenuEntry("ManagerUI:share1_image", "Visit Issues Page", "openModuleIssuesPage(" @ %buildIdx @ ");", 
            "Visit the issues page of this module.");
   }
     
   %isDefault = isModuleDefault(%buildIdx);
   if(!%isDefault || (%localPath !$= "" && IsDirectory(%localPath)))
   {
      addActionMenuEntry("ManagerUI:textField_image", "Edit Properties", 
         "populateModuleProperties(" @ %buildIdx @ ");", 
         "Edit the module's properties");  
         
      /*%gitPath = getModuleGitPathByIndex(%buildIdx);
      if(%gitPath !$= "")
         addActionMenuEntry("ManagerUI:cloud_image", "Change Git Info", "openModuleChangeGitInfoWizard();", 
            "Edits the git path and branch of this build."); */
   }
      
   if(%localPath !$= "")
   {
      addActionMenuEntry("ManagerUI:trashcan_image", "Delete Build", "deleteModule(" @ %buildIdx @ ");", 
         "Deletes this module from the local machine.");
   }
   
   if(!%isDefault)
   {
      addActionMenuEntry("ManagerUI:trashcan_image", "Remove Build", "removeModuleFromListing(" @ %buildIdx @ ");", 
         "Removes module from list. If downloaded, local copy will stay on machine.");
   }
}

//
function deleteModule(%module)
{
   $CurrentModule = %module;
   %moduleName = $CurrentModule.moduleName;
   %localPath = $CurrentModule.localPath;
   
   MessageBoxOKCancel("Delete Module?", 
      "Are you sure you wish to delete the '" @ %moduleName @"' Module?\nFile path: " @ %localPath,
      "doDeleteModule();", "");
}

function doDeleteModule()
{
   displayLoadingSplashGui();
   
   //do da delete.
   %localPath = $CurrentModule.localPath;
   
   if(isDirectory(%localPath))
   {
      if(!MainMenuGui.deleteFolder(%localPath))
      {
         MessageBoxOK("Failure", "Failed to successfully delete local copy of selected Module.");
         hideLoadingSplashGui();
         return;
      }
   }
   
   $CurrentModule.localPath = "";
   saveModule($CurrentModule);
   
   //check if it was a build that had a gitpath
   //if not, then we'll just fully remove the registration as well, as it's completely gone
   if($CurrentModule.gitPath $= "")
   {
      doRemoveModuleFromListing();
   }
   
   MainMenuGUI.goToPage("ModulesPage");
   
   hideLoadingSplashGui();
}

function removeModuleFromListing(%module)
{
   $CurrentModule = %module;
   
   %moduleName = $CurrentModule.moduleName;
   MessageBoxOKCancel("Remove Module?", 
      "Are you sure you wish to remove the '" @ %moduleName @"' Module from the Manager?\nIf there is a local copy on this machine it will not be deleted.",
      "doRemoveModuleFromListing();", "");
}

function doRemoveModuleFromListing()
{
   displayLoadingSplashGui();
   
   if($CurrentModule.isDefault)
      return;
      
   %index = $CurrentModule.moduleId;
      
   PMSettings.remove("Modules/" @ %index @ "/moduleName");
   PMSettings.remove("Modules/" @ %index @ "/gitPath");
   PMSettings.remove("Modules/" @ %index @ "/branchName");
   PMSettings.remove("Modules/" @ %index @ "/description");
   PMSettings.remove("Modules/" @ %index @ "/localPath");
   PMSettings.remove("Modules/" @ %index @ "/isDefault");
   PMSettings.remove("Modules/" @ %index @ "/dependencies");
   PMSettings.remove("Modules/" @ %index @ "/installInNewProj");
   PMSettings.remove("Modules/" @ %index @ "/tags");

   saveData();
   
   MainMenuGUI.goToPage("ModulesPage");
   
   hideLoadingSplashGui();
}

function changeModuleDownloadPath()
{
   %dlg = new OpenFolderDialog()
   {
      Title = "Select Module Download Folder";
      Filters = "";
      DefaultFile = "./";
      ChangePath = false;
      MustExist = true;
      MultipleFiles = false;
   };

   %dlg.DefaultPath = "./";
   if(%dlg.Execute())
   {
      %path = makeFullPath(%dlg.FileName);

      $TorqueManager::moduleDLPath = %path;
      
      if(startsWith(%path, getMainDotCsDir()))
      {
         %path = strreplace(%path, getMainDotCsDir(), "{ManagerDir}");  
      }
      
      EditorSettings.setValue("Settings/Modules/downloadPath", %path);
      
      saveData();
      MainMenuGui.refresh();
   }

   %dlg.delete();
}

function findModulePath(%buildIdx)
{
   %dlg = new OpenFolderDialog()
   {
      Title = "Select Module File";
      Filters = "Module Files (*.module)|*.module|";
      ChangePath = false;
      MustExist = true;
      MultipleFiles = false;
   };

   %dlg.DefaultPath = "./";
   if(%dlg.Execute())
   {
      %path = makeFullPath(%dlg.FileName);
      
      setModuleLocalPathByIndex(%buildIdx, %path);

      saveData();
      MainMenuGui.refresh();
   }

   %dlg.delete();
}
//==============================================================================
// Properties
//==============================================================================
/*function populateModuleProperties(%moduleId)
{
   Canvas.pushDialog(ManagerPropertiesGUI);
   ManagerPropertiesList.clear();
   
   ManagerPropertiesGUI.targetId = %moduleId;
   ManagerPropertiesGUI.mode = "Module";
   
   %isDefault = isModuleDefault(%moduleId);
   
   if(!%isDefault)
   {
      %moduleName = getModuleNameByIndex(%moduleId);
      $tmpModuleName = %moduleName;
      
      %field = makeSettingsCard("Module Name", "$tmpModuleName", "button", %moduleName, %moduleName, "Change Module Name", 
         "changeModuleName("@%moduleId@");");
      ManagerPropertiesList.add(%field);
      
      %gitPath = getModuleGitPathByIndex(%moduleId);
      $tmpModuleGitPath = %gitPath;
      if(%gitPath !$= "")
      {
         %field = makeSettingsCard("Git URL Path", "$tmpModuleGitPath", "button", %gitPath, %gitPath, "Change Module Git Path",
            "changeModuleGitURLPath("@%moduleId@");");
         ManagerPropertiesList.add(%field);

         %branchName = getModuleBranchNameByIndex(%moduleId);
         $tmpModuleBranchName = %branchName;
         if(%branchName $= "")
            %branchName = "(Default Branch)";
                  
         %field = makeSettingsCard("Git Branch Name", "$tmpModuleBranchName", "button", %branchName, %branchName, "Change Module Git Branch Name", 
            "changeModuleBranchName("@%moduleId@");");
         ManagerPropertiesList.add(%field);
      }
   }
   
   %localPath = getModuleLocalPathByIndex(%moduleId);
   if(%localPath !$= "" && IsDirectory(%localPath))
   {
      %installStatus = getModuleInstallInNewProj(%moduleId);
      $tmpModuleInstallInProj = %installStatus;
      
      %field = makeSettingsCard("Install in New Projects", "$tmpModuleInstallInProj", "bool", %installStatus, "", "Dictates if this module should be marked to always install when setting up a new project.", 
         "changeModuleInstallStatus("@%moduleId@");");
      ManagerPropertiesList.add(%field);  
   }
   
   /*%localPath = getEngineBuildLocalPathByIndex(%buildIdx);
   if(%localPath !$= "")
   {
      managerPropertiesInspector.addField("$tmpEngineBuildLocalPath", "Local Folder Path", "string", "Directory Path to the locally downloaded copy of this build.", 
               %localPath, "", "");
   }*/
//}

function changeModuleName(%buildIdx)
{
   $renamingModuleIdx = %buildIdx;
   showRenameWindow("Change Module Name", "doModuleNameChange");
}

function doModuleNameChange(%newName)
{
   setModuleNameByIndex($renamingModuleIdx, %newName);
   
   saveData();
   populateModuleProperties($renamingModuleIdx);
   MainMenuGui.refresh();
}

function changeModuleGitURLPath(%buildIdx)
{
   $renamingModuleIdx = %buildIdx;
   showRenameWindow("Change Module Git URL", "doModuleGitURLPathChange");
}

function doModuleGitURLPathChange(%newURL)
{
   setModuleGitPathByIndex($renamingModuleIdx, %newURL);
   
   saveData();
   populateModuleProperties($renamingModuleIdx);
}

function changeModuleBranchName(%buildIdx)
{
   $renamingModuleIdx = %buildIdx;
   showRenameWindow("Change Module Branch Name", "doModuleBranchChange", true);
}

function doModuleBranchChange(%newName)
{
   setModuleBranchNameByIndex($renamingModuleIdx, %newName);
   
   saveData();
   populateModuleProperties($renamingModuleIdx);
}

function changeModuleInstallStatus(%buildIdx)
{
   setModuleInstallInNewProj(%buildIdx, $tmpModuleInstallInProj);
   
   saveData();
   populateModuleProperties(%buildIdx);
   MainMenuGui.refresh();
}

function hasMissingModuleDependencies()
{
   %missing = false;
   if($CurrentModule.dependencies !$= "")
   {
      %depCount = getTokenCount($CurrentModule.dependencies, ",;");
      for(%i=0; %i < %depCount; %i++)
      {
         %depName = getToken($CurrentModule.dependencies, ",;", %i);
         %depModuleId = findModuleByName(%depName);
         if(%depModuleId != 0)
         {
            %depModule = getModule(%depModuleId);
            if(!isModuleDownloaded(%depModule))
            {
               %missing = true;
               break;  
            }
         }
      }
   }  
   
   return %missing;
}

//==============================================================================
// Wizard Stuff
//==============================================================================
//==============================================================================
// New Module
//==============================================================================
function openNewModuleWizard()
{
   setupWizard();
   
   ManagerWizardWindow.text = "Register New Module";
   
   ManagerWizardWindow.addWizardPage(AddNewModulePage0);
   ManagerWizardWindow.addWizardPage(AddNewModulePage1);
   ManagerWizardWindow.addWizardPage(AddNewModulePage2);
   
   ManagerWizardWindow.setStep(0); 
   
   ManagerWizardWindow.hidden = false;  
   ManagerWizardWindow.selectWindow();
}

function AddNewModulePage0::openPage(%this)
{
   ModuleGitBtn.setStateOn(false);
   ModuleLocalBtn.setStateOn(false);
   
   AddNewModulePage0-->gitPathURL.text = "";
   AddNewModulePage0-->gitBranchName.text = "";
}

function ModuleGitBtn::onClick(%this)
{
   AddNewModulePage0-->gitPathTxt.setActive(true);
   AddNewModulePage0-->gitPathURL.setActive(true);
   AddNewModulePage0-->gitBranchNameTxt.setActive(true);
   AddNewModulePage0-->gitBranchName.setActive(true);
   
   AddNewModulePage0-->localPathTxt.setActive(false);
   AddNewModulePage0-->localPathBtn.setActive(false);
}

function ModuleLocalBtn::onClick(%this)
{
   AddNewModulePage0-->gitPathTxt.setActive(false);
   AddNewModulePage0-->gitPathURL.setActive(false);
   AddNewModulePage0-->gitBranchNameTxt.setActive(false);
   AddNewModulePage0-->gitBranchName.setActive(false);
   
   AddNewModulePage0-->localPathTxt.setActive(true);
   AddNewModulePage0-->localPathBtn.setActive(true);
}

function newModuleLocalPathBtn::onClick(%this)
{
   //open file path bit
   %dlg = new OpenFolderDialog()
   {
      Title = "Select Module Folder";
      Filters = "";
      DefaultFile = "./";
      ChangePath = false;
      MustExist = true;
      MultipleFiles = false;
   };

   %dlg.DefaultPath = "./";
   if(%dlg.Execute())
   {
      %path = makeFullPath(%dlg.FileName);
      AddNewModulePage0-->localPath.setText(%path);
      $TorqueManager::newModuleLocalPath = %path;
   }

   %dlg.delete();
}

function AddNewModulePage1::openPage(%this)
{
   //If they didn't pass validation on the previous page, go back to it
   if(!ModuleGitBtn.isStateOn() && !ModuleLocalBtn.isStateOn())
      ManagerWizardWindow.setStep(0);
      
   AddNewModulePage1-->ModuleNameTxt.text = "";
   AddNewModulePage1-->installCheckbox.setStateOn(false);
      
   $TorqueManager::newModuleIsGit = false;
   $TorqueManager::newModuleIsLocal = false;
      
   if(ModuleGitBtn.isStateOn())
   {
      $TorqueManager::newModuleIsGit = true;
      $TorqueManager::newModuleGitPath = AddNewModulePage0-->gitPathURL.getText();
      $TorqueManager::newModuleBranchName = AddNewModulePage0-->gitBranchName.getText();
   }
   else if(ModuleLocalBtn.isStateOn())
   {
      $TorqueManager::newModuleIsLocal = true;
   }
}

function AddNewModulePage2::openPage(%this)
{
   //If they didn't pass validation on the previous page, go back to it
   if(AddNewModulePage1-->ModuleNameTxt.getText() $= "")
      ManagerWizardWindow.setStep(1);
      
   %this-->ModuleMakeComplete.setHidden(true);
   ManagerWizardWindow-->nextButton.setActive(false);
   
   Canvas.repaint();
   
   //start the ruuuuun
   if($TorqueManager::newModuleIsGit)
   {
      %buildCount = getModuleCount();
      
      PMSettings.setValue("Modules/" @ %buildCount @ "/gitPath", $TorqueManager::newModuleGitPath);
      PMSettings.setValue("Modules/" @ %buildCount @ "/moduleName", AddNewModulePage1-->ModuleNameTxt.getText());
      PMSettings.setValue("Modules/" @ %buildCount @ "/branchName", $TorqueManager::newModuleBranchName);
      PMSettings.setValue("Modules/" @ %buildCount @ "/localPath", "");
      PMSettings.setValue("Modules/" @ %buildCount @ "/isDefault", "0");
      PMSettings.setValue("Modules/" @ %buildCount @ "/installInNewProj", AddNewModulePage1-->installCheckbox.isStateOn());
   }
   else if($TorqueManager::newModuleIsLocal)
   {
      %buildCount = getModuleCount();
      
      PMSettings.setValue("Modules/" @ %buildCount @ "/gitPath", "");
      PMSettings.setValue("Modules/" @ %buildCount @ "/moduleName", AddNewModulePage1-->ModuleNameTxt.getText());
      PMSettings.setValue("Modules/" @ %buildCount @ "/branchName", "");
      PMSettings.setValue("Modules/" @ %buildCount @ "/localPath", $TorqueManager::newModuleLocalPath);
      PMSettings.setValue("Modules/" @ %buildCount @ "/isDefault", "0");
      PMSettings.setValue("Modules/" @ %buildCount @ "/installInNewProj", "0");
   }
   
   saveData();
   
   MainMenuGui.refresh();
   
   %this-->ModuleMakeComplete.setHidden(false);
   ManagerWizardWindow-->nextButton.setActive(true);
}

//==============================================================================
// Change Module Git Info
//==============================================================================
function openModuleChangeGitInfoWizard()
{
   setupWizard();
   
   ManagerWizardWindow.text = "Change Engine Build Git Info";
   ManagerWizardWindow.addWizardPage(changeModuleGitInfoPage0);
   ManagerWizardWindow.addWizardPage(changeModuleGitInfoPage1);
   
   ManagerWizardWindow.setStep(0); 
   
   ManagerWizardWindow.hidden = false;  
   ManagerWizardWindow.selectWindow();
}

function changeModuleGitInfoPage0::openPage(%this)
{
   %oldGitPath = getModuleGitPathByIndex(ActionMenuDropdown.targetId);
   %this-->gitPathURL.text = %oldGitPath;
   
   %oldGitBranch = getModuleBranchNameByIndex(ActionMenuDropdown.targetId);
   %this-->gitBranchName.text = %oldGitBranch;
}

function changeModuleGitInfoPage1::openPage(%this)
{
   //If they didn't pass validation on the previous page, go back to it
   if(changeModuleGitInfoPage0-->gitPathURL.getText() $= "")
      ManagerWizardWindow.setStep(0);
      
   %this-->updateCompleteTxt.setHidden(true);
   ManagerWizardWindow-->nextButton.setActive(false);
   
   Canvas.repaint();
      
   %buildCount = getModuleCount();
   
   if(ActionMenuDropdown.targetId < 0 || %buildCount <= ActionMenuDropdown.targetId)
   {
      %this-->updateCompleteTxt.text = "Something went wrong. Invalid Engine Build Id. Please try again.";
      %this-->updateCompleteTxt.setHidden(false);
      return; //not a good index
   }
      
   PMSettings.setValue("Modules/" @ ActionMenuDropdown.targetId @ "/gitPath", AddNewModulePage0-->gitPathURL.getText());
   PMSettings.setValue("Modules/" @ ActionMenuDropdown.targetId @ "/branchName", AddNewModulePage0-->gitBranchName.getText());
   
   %this-->updateCompleteTxt.text = "Complete!";
   %this-->updateCompleteTxt.setHidden(false);
}

//==============================================================================
// Install Module
//==============================================================================
function openInstallModuleWizard(%project, %module)
{
   $TorqueManager::targetProject = %project;
   $askedToInstallDependencies = false;
   
   %moduleCount = getModuleCount();
   for(%i=0; %i < %moduleCount; %i++)
   {
      setVariable("$TorqueManager::toInstallModules_" @ %i, false);
   }
   
   setVariable("$TorqueManager::toInstallModules_" @ %module.moduleId, true);
   
   setupWizard();
   
   ManagerWizardWindow.text = "Install Module in Project";
   
   ManagerWizardWindow.addWizardPage(InstallModulePage0);
   ManagerWizardWindow.addWizardPage(InstallModulePage1);
   ManagerWizardWindow.addWizardPage(InstallModulePage2);
   
   ManagerWizardWindow.setStep(0); 
   
   ManagerWizardWindow.hidden = false;  
   ManagerWizardWindow.selectWindow();
}

function InstallModulePage0::openPage(%this)
{
   if($TorqueManager::targetProject !$= "")
   {
      ManagerWizardWindow.nextStep();
      return;
   }
      
   InstallModule_SelectProjectStack.clear();
   
   %projectCount = getProjectCount();
   for(%i=1; %i <= %projectCount; %i++)
   {
      %project = getProject(%i);
      
      %projectCard = createCard(%project.projectName, "","","", true, 
            "$TorqueManager::targetProject=" @ %project @ ";ManagerWizardWindow.nextStep();");
            
      InstallModule_SelectProjectStack.add(%projectCard); 
   }

   ManagerWizardWindow-->nextButton.setHidden(true);
   ManagerWizardWindow-->backButton.setHidden(true);
}

function InstallModulePage1::openPage(%this)
{
   ManagerWizardWindow-->nextButton.setHidden(false);
   
   if($TorqueManager::targetProject $= "")
   {
       ManagerWizardWindow.previousStep();
       return;
   }
      
   InstallModule_SelectModulesStack.clear();
   
   %moduleCount = getModuleCount();
   for(%i=1; %i <= %moduleCount; %i++)
   {
      %module = getModule(%i);
      
      if(!isModuleDownloaded(%module))
         continue;
         
      if(isModuleInstalledInProject($TorqueManager::targetProject, %module))
         continue;
      
      %moduleCard = createEditCard(%module.moduleName, "checkbox", "$TorqueManager::toInstallModules_" @ %module.moduleId, "", "No;Yes");
            
      InstallModule_SelectModulesStack.add(%moduleCard); 
   }
}

function InstallModulePage2::openPage(%this)
{
   %this-->installModuleComplete.setHidden(true);
   ManagerWizardWindow-->nextButton.setActive(false);  
   Canvas.repaint();
   
   %gamePath = makeFullPath(getProjectGamePath($TorqueManager::targetProject));
   
   %moduleCount = getModuleCount();
   for(%i=1; %i <= %moduleCount; %i++)
   {
      %module = getModule(%i);
      
      if(getVariable("$TorqueManager::toInstallModules_" @ %module.moduleId) == 1)
      {
         //check if the localPath has the *.module file def, and if so, clip it
         if(isFile(%module.localPath))
            %modulePath = filePath(%module.localPath);
         else
            %module.localPath = %module.localPath;
            
         %modulePath = makeFullPath(%module.localPath) @ "/";
         %modulePath = strreplace(%modulePath, "//", "/");
         
         %installPath = %gamePath @ "/data/" @ %module.moduleName @ "/";
         
         if(!IsDirectory(%installPath))
         {
            createPath(%installPath);  
         }
         
         if(!copyProjectFolder(%modulePath, %installPath))
         {
            error("Failed to install module " @ %module.moduleName @ " from path: " @ %modulePath @ " to new project: " @ $TorqueManager::targetProject.projectName);
         }
         else
         {
            %tags = %module.tags;
            %tagCount = getTokenCount(%tags, ",;");  
            
            for(%t=0; %t < %tagCount; %t++)
            {
               %tag = getToken(%tags, ",;", %t);
               if(%tag $= "Source Files" || %tag $= "Has Source Files" || %tag $= "Special Installation Instruction")
               {
                  MessageBoxOK("", "The module " @ %module.moduleName @ " has source files or special installation instructions. You should check any manual steps needed and then regenerate the project.", "");
                  break;  
               }
            }
         }
      }
   }
   
   %this-->installModuleComplete.setHidden(false);
   ManagerWizardWindow-->nextButton.setActive(true);  
   Canvas.repaint();
}